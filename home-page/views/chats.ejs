<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">

  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
 
  <title>Chat</title>
  <style>
    /* Global Styles */
    /* Basic reset for full-screen layout */
/* Body styling */
body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  margin: 0;
  padding: 0;
  height: 100%;  
  overflow: hidden; 
  background-color: #f4f7fc;
  display: flex;
  flex-direction: column;
  height: 100vh;
}
.home-btn {
            position: fixed;
            /* Fixed at the top-left corner */
            top: 30px;
            left: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            /* Pointer cursor for interactivity */
            transition: transform 0.3s;
            /* Smooth hover effect */
            height: 50px;
        }

        .home-btn:hover {
            transform: scale(1.1);
            /* Zoom effect on hover */
        }

        .home-btn i {
            font-size: 24px;
            /* Icon size */
            color: black;
            /* Grey icon color */
            transition: color 0.3s;
            /* Smooth hover color change */
        }

        .home-btn:hover i {
            color: black;
            /* Change to black on hover */
        }

.chat-container {
      display: flex;
      flex: 1;
      min-height: 100vh;
      padding: 20px;
      gap: 20px;
    }
    
    .user-list {
  width: 20%;
  background-color: #ffffff;
  border-radius: 12px;
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
  padding: 20px;
  overflow-y: auto;
  max-height: calc(100vh - 40px);
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.user-list h3 {
  margin: 0;
  font-size: 1.5rem;
  font-weight: bold;
  color: #333;
  text-align: center;
  border-bottom: 2px solid #eaeaea;
  padding-bottom: 10px;
}

.user-list ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

.user-list li {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 10px 15px;
  background-color: #f7f7f7;
  border-radius: 10px;
  cursor: pointer;
  transition: background-color 0.3s ease, box-shadow 0.3s ease;
  font-size: 1rem;
  font-weight: 500;
  color: #333;
  margin-bottom: 20px;
}

.user-list li:hover {
  background-color: #f1ebeb;
  box-shadow: 0 4px 10px rgba(131, 1, 49, 0.1);
  transform: translateY(-2px);
}

.user-list li img {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid #e4e4e4;
}


/* Chat box styles */
#chat-boxes {
  flex: 1;
      background-color: #fff;
      border-radius: 8px;
      display: flex;
      flex-direction: column;
      height: 100%;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      overflow: hidden;

}

.chat-box {
  overflow: hidden; 
  display: flex;
  flex-direction: column;
  height: 100%;
  background-color: white;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  position: relative; /* Keep it fixed within its parent */
}

.message-container {
  flex: 1;
  overflow-y: auto;
  padding: 10px;
  margin-bottom: 10px;
  max-height: 60vh; /* Set max height for message container */
  background-image: url('/uploads/images/back.jpg'); 
  background-position: center; /* Center the background image */
  border-radius: 8px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); /* Shadow around the message container */
}

.chat-footer {
      display: flex;
      align-items: center;
      padding: 10px;
      bottom: 0;
      gap: 10px;
      background-color: #fff;
      border-top: 1px solid #e4e4e4;
    }

.chat-footer:hover {
  background-color: #f8f8f8; /* Light background change on hover */
}

/* Styling for the input field */
.chat-footer input {
  flex: 1;
  padding: 15px;
  border-radius: 20px;
  border: 1px solid #ccc;
  font-size: 16px;
  font-weight: 500;
  transition: border 0.3s ease, box-shadow 0.3s ease;
  background-color: #f9f9f9; /* Light background */
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05); /* Soft shadow for depth */
}

.chat-footer input:focus {
  outline: none;
  border-color: #830131; /* Focus border color */
  box-shadow: 0 0 12px rgba(131, 1, 49, 0.4); /* More pronounced shadow on focus */
  background-color: #fff; /* Slightly lighter background on focus */
}

/* Styling for the send button */
.chat-footer i {
  padding: 2px;
  background-color: #830131;
  color: white;
  border: none;
  border-radius: 50%; /* Circular button for a modern look */
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s ease, transform 0.2s ease-in-out;
  width: 50px;
  height: 50px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.chat-footer i:hover {
  background-color: #5c021e;
  transform: scale(1.1); /* Scale up on hover */
}

.chat-footer i:active {
  transform: scale(1); /* Reset scale on click */
}

/* Add a subtle shadow to the button */
.chat-footer i:focus {
  box-shadow: 0 4px 15px rgba(131, 1, 49, 0.4);
}

/* Message Styles */
.message {
  max-width: 50%;
  width: fit-content;
  padding: 10px;
  margin: 5px 0;
  border-radius: 10px;
  font-size: 14px;
  word-wrap: break-word;
  overflow-wrap: break-word;
}

.message.sent {
  background-color: #ccb4bc;
  text-align: right;
  margin-left: auto;
}

.message.received {
  background-color: #b4c8cc;
  text-align: left;
  margin-right: auto;
}
.chat-header {
      display: flex;
      align-items: center;
      padding: 15px;
      background-color: #f8f9fa;
      border-bottom: 1px solid #e4e4e4;
      height: 5%;
    }

/* Styling for the profile image */
.chat-header img.profile-img {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  margin-right: 15px;
  object-fit: cover;
}

/* Styling for the username */
.chat-header .username {
  font-size: 1.2rem;
  color: #333;
  font-weight: bold;
  transition: color 0.3s ease;  /* Smooth transition for text color */
}
.message-time {
  font-size: 12px;
  color: #8a8a8a;  /* Light gray color for the time */
  display: block;  /* Place it on a new line */
  margin-top: 5px;
  text-align: right;
}

    

  </style>
</head>
<body>
  <a href="/home" class="home-btn">
    <i class="fa fa-home"></i>
</a>
  <div class="chat-container">
    <div class="user-list">
      <h3>Users</h3>
      <ul id="user-list">
        <% users.forEach(function(user) { %>
          <li id="user_<%= user._id %>"  onclick="openChatBox('<%= user._id %>', '<%= user.firstName %> <%= user.lastName %>', '<%= user.profileImage %>')">
            <div><%= user.username %></div>
          </li>
        <% }); %>
      </ul>
    </div>

    <div id="chat-boxes"></div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const currentUserId = '<%= currentUserId %>';
    socket.emit('user_connected', currentUserId);
    const token = '<%= token %>';
    
    function openChatBox(userId, userName, userProfileImage) {
      let chatBox = document.getElementById(userId);
    
      if (!chatBox) {
        chatBox = document.createElement('div');
        chatBox.className = 'chat-box';
        chatBox.id = userId;
    
        const header = document.createElement('h3');
        header.classList.add('chat-header');  // Apply the chat header styles
        
        const profileImage = document.createElement('img');
        profileImage.src = userProfileImage || '/uploads/images/default.jpg';  // Default image if none
        profileImage.classList.add('profile-img');
        
        const username = document.createElement('span');
        username.textContent = `${userName}`;
        
        header.appendChild(profileImage);
        header.appendChild(username);
        chatBox.appendChild(header);
    
        const messageContainer = document.createElement('div');
        messageContainer.className = 'message-container';
        chatBox.appendChild(messageContainer);
    
        const chatFooter = document.createElement('div');
        chatFooter.className = 'chat-footer';
    
        const input = document.createElement('input');
        input.type = 'text';
        input.placeholder = 'Type a message...';
        chatFooter.appendChild(input);
    
        const sendButton = document.createElement('i');
        sendButton.className = 'fa fa-send-o';
        sendButton.onclick = () => {
          const message = input.value;
          if (message.trim()) {
            socket.emit('send_message', {
              senderId: currentUserId,
              receiverId: userId,
              message
            });
    
            const messageElement = document.createElement('div');
            messageElement.classList.add('message', 'sent');
            messageElement.innerHTML = `
              <strong>You:</strong> ${message}
              <span class="message-time">${getFormattedTime(new Date())}</span>
            `;
            messageContainer.appendChild(messageElement);
    
            input.value = '';
            messageContainer.scrollTop = messageContainer.scrollHeight;
          }
        };
        chatFooter.appendChild(sendButton);
        chatBox.appendChild(chatFooter);
    
        document.getElementById('chat-boxes').appendChild(chatBox);
      }
    
      const messageContainer = chatBox.querySelector('.message-container');
      if (messageContainer.children.length === 0) {
        fetch(`/messages/${userId}`, {
          headers: { 'Authorization': `Bearer ${token}` }
        })
        .then(response => response.json())
        .then(messages => {
          messages.forEach(msg => {
            const messageElement = document.createElement('div');
            messageElement.classList.add('message', msg.senderId._id === currentUserId ? 'sent' : 'received');
    
            // Correctly reference the message's formatted timestamp
            const messageTime = new Date(msg.timestamp);
          const hours = messageTime.getHours().toString().padStart(2, '0');
          const minutes = messageTime.getMinutes().toString().padStart(2, '0');
          const formattedTime = `${hours}:${minutes}`;
    
            messageElement.innerHTML = `
              <strong>${msg.senderId.firstName}:</strong> ${msg.message}
              <span class="message-time">${formattedTime}</span>
            `;
            
            messageContainer.appendChild(messageElement);
          });
    
          // Scroll to the bottom after appending messages
          messageContainer.scrollTop = messageContainer.scrollHeight;
        })
        .catch(error => console.error('Error fetching messages:', error));
      }
    
      chatBox.style.display = 'block';
      document.querySelectorAll('.chat-box').forEach(box => {
        if (box.id !== userId) box.style.display = 'none';
      });
    }
    
    // Helper function to get the current time in HH:MM format
    function getFormattedTime(date) {
      const hours = date.getHours().toString().padStart(2, '0');
      const minutes = date.getMinutes().toString().padStart(2, '0');
      return `${hours}:${minutes}`;
    }
    
    socket.on('receive_message', (data) => {
      const chatBox = document.querySelector('.chat-box');
      if (chatBox) {
          const messageContainer = chatBox.querySelector('.message-container');
  
          const senderName = data.senderId ? data.senderId.firstName : 'Unknown';
          const receiverName = data.receiverId ? data.receiverId.firstName : 'Unknown';
  
          const messageTime = new Date(data.timestamp);
          const hours = messageTime.getHours().toString().padStart(2, '0');
          const minutes = messageTime.getMinutes().toString().padStart(2, '0');
          const formattedTime = `${hours}:${minutes}`;
  
          const messageElement = document.createElement('div');
          messageElement.classList.add('message', data.senderId._id === currentUserId ? 'sent' : 'received');
          messageElement.innerHTML = `
              <div class="message-header">
                  <strong>${senderName}:</strong> <span class="message-time">${formattedTime}</span>
              </div>
              <div class="message-content">${data.message}</div>
          `;
  
          messageContainer.appendChild(messageElement);
          messageContainer.scrollTop = messageContainer.scrollHeight;
      }
  });
    
  </script>

</body>
</html>
