<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Home - Social Media</title>
    <link rel="stylesheet">
    <style>
 /* Global Styles */
::-webkit-scrollbar {
    display: none; /* Hide the scrollbar */
}

body,
html {
    margin: 0;
    padding: 0;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #e0ecff;
    overflow-x: hidden; /* Prevents horizontal scrolling */
}

.search {
    display: block;
}

.container {
    display: flex;
    height: 100vh;
    padding: 10px 10px;
    justify-content: space-between;
}

/* Media Query to Collapse Sidebars on Smaller Screens */
@media (max-width: 768px) {
    .sidebar {
        transform: translateX(-100%);
    }

    .right-sidebar {
        transform: translateX(100%);
    }

    .feed {
        width: 100%;
        margin-left: 0;
        margin-right: 0;
    }
}

/* Sidebar Styling */
.right-sidebar
{
    width: 15%; /* Sidebar width */
    height: calc(100vh - 20px); /* Full viewport height minus padding */
    padding: 20px;
    background-color: #ffffff; /* Solid white background */
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* Subtle shadow */
    border-radius: 10px; /* Rounded corners */
    position: fixed; /* Fix sidebar position */
    transition: transform 0.3s ease;
}

/* Left Sidebar Positioned Fixed */


.sidebar {
    width: 240px; /* Fixed width to match the profile link */
    
    padding-top: 0px;
    padding-bottom: 0px;
    background-color: #ffffff; /* Same background as the profile link */
    /* box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); Same shadow as the profile link */
    border-radius: 20px; /* Same rounded corners as the profile link */
    position: fixed; /* Fix sidebar position */
    transition: transform 0.3s ease;
    top: 220px; /* Place it below the profile link */
    left: 10px;
}


/* Right Sidebar Positioned Fixed */
.right-sidebar {
    top: 10px;
    right: 10px;
    padding-left: 7px;
}




/* Sidebar Items Styling */
.sidebar ul,
.right-sidebar ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
}

.sidebar ul li,
.right-sidebar ul li {
    /* margin: 10px 0; */
    font-weight: bold;
    padding-top: 7px;
    padding-bottom: 7px;
    padding-left: 20px;
    padding-right: 20px;
   position: relative;
    padding-left: 25px; /* Add space for the left bar */
}



.sidebar ul li a {
    background-color: transparent; /* No individual background */
    color: #333; /* Text color */
    padding: 15px;
    border-radius: 8px;
    display: block;
    
    text-decoration: none;
    transition: color 0.3s; /* Smooth color transition */
}

.sidebar ul li a:hover {
    color: #007bff; /* Highlight text color on hover */
    transform: translateY(-2px); /* Slight lift effect */
}




/* Profile Section Styling */
.profile-link {
    width: 200px; /* Fixed width to match the sidebar */
    background-color: #ffffff; /* Same background as the sidebar */
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* Same shadow as the sidebar */
    border-radius: 10px; /* Same rounded corners as the sidebar */
    text-decoration: none;
    color: #333;
    display: flex;
    align-items: center;
    position: fixed;
    top: 10px; /* Position above the sidebar */
    left: 10px;
 padding: 20px;
}

.profile-link:hover {
    background-color: #f0f2f5;
}

.create-post-link {
    padding: 20px;
    width: 200px; /* Fixed width to match the sidebar */
    background-color: #007bff; /* Same background as the sidebar */
    box-shadow: 2px 4px 12px rgba(0, 0, 0, 0.5); /* Same shadow as the sidebar */
    border-radius: 30px; /* Same rounded corners as the sidebar */
    text-decoration: none;
    color: white;
    display: flex;
    align-items: center;
    position: fixed;
    top: 130px; /* Position above the sidebar */
    left: 10px;
}

.create-post-link:hover {
    background-color: rgb(0, 0, 170);
    transform: scale(1.05); /* Scale the button slightly larger */
    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2); /* Add a shadow to give depth */
    transition: transform 0.2s ease, box-shadow 0.2s ease; /* Smooth animation */
}


.profile-picture {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    overflow: hidden;
    margin-right: 10px;
}

.profile-picture img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.profile-name {
    font-size: 18px;
    font-weight: bold;
    color: #333;
}

/* Feed Section */
.feed {
    width: 60%;
    padding: 20px;
    margin-left: 20%; /* Leaves space for fixed left sidebar */
    margin-right: 20%; /* Leaves space for fixed right sidebar */
}

/* Story Carousel Styling */
.story-carousel {
            display: flex;
            overflow-x: auto;
            gap: 15px;
            padding: 20px;
            margin-bottom: 20px;
            background-color: #ffffff;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            border-radius: 10px;
        }

        .story {
            width: 60px;
            flex-shrink: 0;
            text-align: center;
            cursor: pointer;
            transition: transform 0.2s;
        }

        .story:hover {
            transform: scale(1.1);
        }


        .story-image-wrapper {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 3px solid transparent;
            transition: border-color 0.3s;
        }

        .story img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 50%;
        }

        .story:hover .story-image-wrapper {
            border-color: #79afff;
        }

        .story p {
            font-size: 12px;
            margin-top: 5px;
            color: #333;
        }


/* Modal Styling */
.modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    align-items: center;
    justify-content: center;
}

.modal-content {
    background-color: #ffffff;
    padding: 20px;
    border-radius: 8px;
    width: 80%;
    max-width: 500px;
    position: relative;
}

.close {
    position: absolute;
    right: 20px;
    top: 10px;
    font-size: 28px;
    color: #aaa;
    cursor: pointer;
}

.close:hover {
    color: black;
}        .create-post-box:hover {
            box-shadow: 0 6px 18px rgba(0, 0, 0, 0.2);
        }

  /* Post Button Styling */
  .post-button {
            width: 100%;
            padding: 10px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.3s;
            /* Add transform transition */
        }

        .post-button:hover {
            background-color: #0056b3;
            transform: translateY(-3px);
            /* Moves the button up slightly to create a "pop" effect */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            /* Adds a shadow to enhance the lift effect */
        }



   

        #caption {
            width: 100%;
            height: 100px;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 16px;
            resize: none;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
            color: #333;
            background-color: #f9f9f9;
            transition: border-color 0.3s ease;
        }

        #caption:focus {
            border-color: #007bff;
            outline: none;
            background-color: #fff;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
        }

        /* Hide the original file input */
        input[type="file"] {
            display: none;
        }

        /* Container styling */
        .custom-file-upload {
            display: flex;
            align-items: center;
            border: 1px solid #ccc;
            border-radius: 5px;
            padding: 8px 10px;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        /* Style for the custom upload button */
        .upload-button {
            padding: 8px 15px;
            background-color: #007bff;
            color: #fff;
            border-radius: 5px;
            cursor: pointer;
            margin-right: 10px;
            font-size: 14px;
            transition: background-color 0.3s ease;
            text-align: center;
        }

        .upload-button:hover {
            background-color: #0056b3;
        }

        /* Style for the file name display */
        #file-name {
            font-size: 14px;
            color: #666;
            flex-grow: 1;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        /* From Uiverse.io by Yaya12085 */
        .radio-inputs {
            position: relative;
            display: flex;
            flex-wrap: wrap;
            border-radius: 0.5rem;
            background-color: #EEE;
            box-sizing: border-box;
            box-shadow: 0 0 0px 1px rgba(0, 0, 0, 0.06);
            padding: 0.25rem;
            width: 300px;
            font-size: 14px;
        }

        .radio-inputs .privacy {
            flex: 1 1 auto;
            text-align: center;
        }

        .radio-inputs .privacy input {
            display: none;
        }

        .radio-inputs .privacy .name {
            display: flex;
            cursor: pointer;
            align-items: center;
            justify-content: center;
            border-radius: 0.5rem;
            border: none;
            padding: .5rem 0;
            color: rgba(51, 65, 85, 1);
            transition: all .15s ease-in-out;
        }

        .radio-inputs .privacy input:checked+.name {
            background-color: #fff;
            font-weight: 600;
        }

        .notifications-link {
            cursor: pointer;
        }

        #searchTab{
            cursor: pointer;
        }
        .button {
            color: #007bff;
            outline: none;
            border: none;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            position: absolute;
            /* Set the button to absolute positioning */
            bottom: 30px;
            /* Position at the bottom of the sidebar with some padding */
            left: 5%;
            /* Center horizontally within the sidebar */
        }



        .icon {
            width: 30px;
            /* Adjusting width directly for SVG scaling */
            height: 30px;
        }

        /* Remove bullets from the notification list */
        #notificationsList {
            list-style-type: none;
            padding: 0;
        }

        /* Style each notification item */
        #notificationsList li {
            background-color: #f9f9f9;
            padding: 10px;
            margin-bottom: 8px;
            border-radius: 5px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        /* Button styling for Accept, Decline, and Delete */
        #notificationsList li button {
            margin-left: 10px;
            padding: 5px 10px;
            font-size: 14px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        /* Accept button style */
        #notificationsList li button.accept-button {
            background-color: #007bff;
            /* Green */
            color: white;
        }

        #notificationsList li button.accept-button:hover {
            background-color: #006adb;
        }

        /* Decline button style */
        #notificationsList li button.decline-button {
            background-color: #f44336;
            /* Red */
            color: white;
        }

        #notificationsList li button.decline-button:hover {
            background-color: #d30400;
        }

        /* Delete button style */
        #notificationsList li button.delete-button {
            background-color: grey;
       
            color: white;
        }

        #notificationsList li button.delete-button:hover {
            background-color: rgb(90, 90, 90);
        }

        /* From Uiverse.io by alexruix */
        .group {
            display: flex;
            line-height: 28px;
            align-items: center;
            position: relative;
            max-width: 500px;
        }

        .input {
            width: 100%;
            height: 40px;
            line-height: 28px;
            padding: 0 1rem;
            padding-left: 2.5rem;
            border: 2px solid transparent;
            border-radius: 8px;
            outline: none;
            background-color: #f3f3f4;
            color: #0d0c22;
            transition: .3s ease;
        }

        .input::placeholder {
            color: #9e9ea7;
        }

        .input:focus,
        input:hover {
            outline: none;
            border-color: #007bff;
            background-color: #fff;
            box-shadow: 0 0 0 4px #8ec5ff;
        }

        .icon {
            position: absolute;
            left: 1rem;
            fill: #9e9ea7;
            width: 1rem;
            height: 1rem;
        }




      
        /* Post Section Styling */
        .posts h2 {
            font-size: 20px;
            color: #333;
            border-bottom: 2px solid #ddd;
            padding-bottom: 10px;
            margin-bottom: 20px;
        }

        .post {
            background-color: #ffffff;
            padding: 15px;
            margin-bottom: 20px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            border-radius: 10px;
        }

        .post img {
            max-width: 100%;
            border-radius: 8px;
            margin-top: 10px;
        }

        .privacy-level {
            font-size: 12px;
            color: #888;
            margin-top: 10px;
        }

        .sidebar ul li.active::before {
    content: ""; /* Adds an empty content block */
    position: absolute; /* Positions the pseudo-element relative to the li */
    left: 0; /* Align it to the left of the li */
    top: 0; /* Start from the top of the li */
    height: 100%; /* Match the full height of the li */
    width: 5px; /* Width of the blue bar */
    background-color: #007bff; /* Blue color for the bar */
    border-radius: 4px 0 0 4px; /* Optional: rounded edges */
}

.post-actions {
        display: flex;
        gap: 10px;
        align-items: center;
        margin-top: 10px;
    }

    .like-icon, .comment-icon {
        cursor: pointer;
        font-size: 16px;
    }

    .like-icon:hover, .comment-icon:hover {
        opacity: 0.7;
    }

    .commentSection {
        margin-top: 10px;
        border-top: 1px solid #dbdbdb;
        padding-top: 10px;
        max-height: 200px;
        overflow-y: auto;
    }

    

/* Close button styling */
.close {
  position: absolute;
  top: 10px;
  right: 10px;
  font-size: 20px;
  font-weight: bold;
  cursor: pointer;
  color: #333;
}

/* Tabs styling */
.tabs {
  display: flex;
  justify-content: space-around;
  margin-bottom: 15px;
}

.tabs button {
  flex: 1;
  padding: 10px;
  background-color: #f0f4ff;
  border: none;
  border-radius: 5px;
  color: #007bff;
  font-weight: bold;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.tabs button.active {
  background-color: #007bff;
  color: white;
}

.tabs button:hover {
  background-color: #0056b3;
  color: white;
}

/* Tab content styling */
.tab-content h3 {
  margin-bottom: 15px;
  color: #333;
}

.tab-content ul {
  list-style: none;
  padding: 0;
}

.tab-content ul li {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
}

.tab-content ul li img {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  margin-right: 10px;
}

.tab-content ul li span {
  font-weight: bold;
  color: #333;
}

#confirm-delete {
  background-color: #d9534f;
  color: #fff;
}

#cancel-delete {
  background-color: #5bc0de;
  color: #fff;
}
    </style>
</head>

<body>
    <div class="container">
            <a href="/home/profile" class="profile-link">
                <div class="profile-picture">
                    <img src="<%= user.profileImage || '/path/to/default-profile.png' %>" alt="Profile Picture">
                </div>
                <div class="profile-name">
                    <%= user.firstName %>
                        <%= user.lastName %>
                </div>
            </a>
            
            <a href="#" class="create-post-link" onclick="openModal()" >Create Post</a>

        <div class="sidebar">
            
            <aside>
              
                <ul>
                
                    <li><a href="/home" id="home-link">Home</a></li>

                    <li id="friends"> 
                        <a href="/friend" id="fr">Friends</a>
                    </li>
                    
                    
                    <li id="chats"><a href="/chats" id="ch">Chats</a></li>
                    <li href="/home/notifications" class="notifications-link"> 
                        <a onclick="openNotificationModal()" id="notify">Notifications</a>
                    </li>
                    <li href="/friend/list" class="search" id="searchTab">
                        <a  onclick="openSearchModal()" id="search">Search Friends</a>
                    </li>
                   
                </ul>
            </aside>
        </div>
    
        <div class="feed">
            <!-- Story Carousel -->
            <section class="story-carousel">
                <div class="story" onclick="openUploadModal()">
                    <div class="story-image-wrapper">
                        <img src="<%= user.profileImage %>" alt="Your Story">
                    </div>
                    <p>Your Story</p>
                </div>
    
                <% stories.forEach(story=> { %>
                    <div class="story" onclick="viewStory('<%= story.mediaUrl %>')">
                        <div class="story-image-wrapper">
                            <img src="<%= story.user.profileImage || '/path/to/default-profile.png' %>"
                                alt="<%= story.user.firstName %>">
                        </div>
                        <p>
                            <%= story.user.firstName %>
                        </p>
                    </div>
                    <% }) %>
            </section>
    
            <!-- Modal for Creating a Post -->
            <div id="uploadStoryModal" class="modal">
                <div class="modal-content">
                    <span class="close" onclick="closeUploadModal()">&times;</span>
                    <h3>Upload Story</h3>
                    <form action="/home/upload-story" method="POST" enctype="multipart/form-data">
    
                        <div class="form-group">
                            <div class="custom-file-upload">
                                <label for="storyFile" class="upload-button">Choose File</label>
                                <span id="file-name">No file chosen</span>
                                <input type="file" name="storyFile" accept="image/,video/" id="storyFile"
                                    onchange="updateFileNamen()">
                            </div>
                        </div>
    
                        <div class="form-group">
                            <div for="privacy" class="radio-inputs">
                                <label class="privacy">
                                    <input type="radio" name="radio" checked="">
                                    <span class="name">Public</span>
                                </label>
                                <label class="privacy">
                                    <input type="radio" name="radio">
                                    <span class="name">Private</span>
                                </label>
                            </div>
                        </div>
                        <br>
                        <button type="submit" class="post-button">Upload</button>
                    </form>
                </div>
            </div>
    
            <!-- Modal for Viewing a Story -->
            <div id="storyModal" class="modal">
                <div class="modal-content">
                    <span class="close" onclick="closeStoryModal()">&times;</span>
                    <img id="storyImage" src="<%= stories.mediaUrl %>" alt="Story Image"
                        style="width: 100%; height: auto; border-radius: 10px;">
                </div>
            </div>
    
            <!-- Posts Feed Section --> 
            <section class="posts">
                <h2>Posts</h2>
                <% posts.forEach(post => { %>
                    <article class="post">
                        <!-- Post Author and Caption -->
                        <p>
                            <img src="<%= post.user.profileImage || '/path/to/default-profile.png' %>"
                                alt="<%= post.user.firstName %>" style="width: 30px; height: 30px; border-radius: 50%; margin-right: 5px;">
                        
                                <strong>
                                    <a href="<%= post.user._id.toString() === user._id.toString() ? '/home/profile' : `/home/profile/user/${post.user._id}` %>">
                                      <%= post.user.username %>
                                    </a>
                                  </strong>
                            <p><%= post.content %></p>
                        </p>
                        <p class="privacy-level">Privacy: <%= post.privacy %></p>
                        <p class="date">
                            Posted on: <%= new Date(post.createdAt).toLocaleDateString('en-US', {
                                year: 'numeric',
                                month: 'short',
                                day: 'numeric'
                            }) %>
                        </p>

                        <% if (post.isOwner) { %>
                            <!-- Only show delete button for the post owner -->
                            <button onclick="confirmDelete('post', '<%= post._id %>')">Delete Post</button>
                          <% } %>
                          <br>

                        <!-- Post Media -->
                        <% if (post.mediaUrl) { %>
                            <% if (post.mediaType === 'image') { %>
                                <img src="<%= post.mediaUrl %>" alt="Post image" style="max-width: 100%;">
                            <% } else if (post.mediaType === 'video') { %>
                                <video controls style="max-width: 100%;">
                                    <source src="<%= post.mediaUrl %>" type="video/mp4">
                                    Your browser does not support the video tag.
                                </video>
                            <% } %>
                        <% } %>
            
                        <!-- Like and Comment Buttons -->
                        <div class="post-actions">
                            <span class="like-icon" onclick="toggleLike(event, '<%= post._id %>')">❤️</span>
                            <span id="likes-count-<%= post._id %>" onclick="openReactionModal('post','<%= post._id %>', 'likes')">
                                <%= post.likes.length %> Likes
                              </span>

                            <span class="like-icon" onclick="toggledisLike(event, '<%= post._id %>')">❤️</span>
                            <span id="dislikes-count-<%= post._id %>" onclick="openReactionModal('post','<%= post._id %>', 'dislikes')">
                                <%= post.dislikes.length %> Dislikes
                              </span>
                              
            
                            <span class="comment-icon" onclick="openCommentSection('<%= post._id %>')">💬</span>
                            <span><%= post.comments.length %> Comments</span>
                        </div>
            
                        <!-- Comment Section -->
                        <div id="commentSection-<%= post._id %>" class="commentSection" style="display: none;">
                            <h4>Comments</h4>
                            <ul id="comments-list-<%= post._id %>">
                                <!-- Comments will be dynamically loaded -->
                            </ul>
                            <input type="text" id="new-comment-<%= post._id %>" placeholder="Add a comment..." />
                            <button onclick="addComment('<%= post._id %>')">Post</button>
                        </div>
                    </article>

                    <div id="delete-modal" class="modal" style="display: none;">
                        <div class="modal-content">
                        <h3>Are you sure you want to delete this?</h3>
                        <button id="confirm-delete" onclick="performDelete('<%= post._id %>')">Yes, Delete</button>
                        <button id="cancel-delete" onclick="closeDeleteModal()">Cancel</button>
                        </div>
                    </div>
                <% }) %>
            </section>
            
        </div>
    
        <div class="right-sidebar" id="right-sidebar">
            <aside>
                <h2>Suggestions</h2>
                <!-- Suggested friends -->
                <ul id="suggestionsList">
                    <!-- Suggestions will be populated dynamically here -->
                </ul>
            </aside>
        </div>
        <div id="postModal" class="modal">
            <div class="modal-content">
                <span class="close" onclick="closeModal()">&times;</span>
                <h3>Create a Post</h3>
                <form action="/home/create-post" method="POST" enctype="multipart/form-data">
    
                    <div class="form-group">
                        <div class="custom-file-upload">
                            <label for="mediaFile" class="upload-button">Choose File</label>
                            <span id="file-nam">No file chosen</span>
                            <input type="file" name="mediaFile" accept="image/,video/" id="mediaFile"
                                onchange="updateFileName()">
                        </div>
                    </div>
                    <div class="form-group">
                        <textarea name="content" placeholder="Write a Caption" id="caption"></textarea>
                    </div>
                    <div class="form-group">
                        <div for="privacy" class="radio-inputs">
                            <label class="privacy">
                                <input type="radio" name="privacy" value="public" checked="">
                                <span class="name">Public</span>
                            </label>
                            <label class="privacy">
                                <input type="radio" name="privacy" value="private">
                                <span class="name">Private</span>
                            </label>
    
                            <label class="privacy">
                                <input type="radio" name="privacy" value="friends">
                                <span class="name">Friends</span>
                            </label>
                        </div>
                    </div>
                    <br>
                    <button type="submit" class="post-button">Post</button>
                </form>
            </div>
        </div>
    </div>
    
   
    <!-- Notification Modal -->
    <div id="notification-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeNotificationModal()">&times;</span>
            <h3>Notifications</h3>

            <ul id="notificationsList">
                <!-- JavaScript will populate notifications here -->

            </ul>

        </div>
    </div>

    <div id="search-modal" class="modal">
        <div class="modal-content">
            <h3>Search Friends:</h3>
            <div class="group">
                <svg class="icon" aria-hidden="true" viewBox="0 0 24 24">
                    <g>
                        <path
                            d="M21.53 20.47l-3.66-3.66C19.195 15.24 20 13.214 20 11c0-4.97-4.03-9-9-9s-9 4.03-9 9 4.03 9 9 9c2.215 0 4.24-.804 5.808-2.13l3.66 3.66c.147.146.34.22.53.22s.385-.073.53-.22c.295-.293.295-.767.002-1.06zM3.5 11c0-4.135 3.365-7.5 7.5-7.5s7.5 3.365 7.5 7.5-3.365 7.5-7.5 7.5-7.5-3.365-7.5-7.5z">
                        </path>
                    </g>
                </svg>
                <input placeholder="Search" type="search" class="input" id="tab" oninput="searchUsers()">
            </div>
            <span class="close" onclick="closeSearchModal()">&times;</span>

            <ul id="searchResults">
                <!-- JavaScript will populate notifications here -->

            </ul>

        </div>
    </div>

    <div id="reaction-modal" class="modal" style="display: none;">
        <div class="modal-content">
          <span class="close" onclick="closeReactionModal()">&times;</span>
          <div class="tabs">
            <button id="likes-tab" onclick="showLikes()">Likes</button>
            <button id="dislikes-tab" onclick="showDislikes()">Dislikes</button>
          </div>
          <div id="likes-section" class="tab-content">
            <h3>Liked by</h3>
            <ul id="likes-list">
              <!-- Likes will be dynamically inserted here -->
            </ul>
          </div>
          <div id="dislikes-section" class="tab-content" style="display: none;">
            <h3>Disliked by</h3>
            <ul id="dislikes-list">
              <!-- Dislikes will be dynamically inserted here -->
            </ul>
          </div>
        </div>
      </div>

    
      
      

    <!-- JavaScript to handle modal behavior -->
    <script>
        function scrollToTopAndRefresh() {
            window.scrollTo({ top: 0, behavior: 'smooth' });
            setTimeout(() => {
                location.reload();
            }, 500); // Delay to ensure smooth scroll completes before refreshing
        }

        function updateFileName() {
            const fileInput = document.getElementById("mediaFile");
            const fileName = document.getElementById("file-nam");
            fileName.textContent = fileInput.files.length > 0 ? fileInput.files[0].name : "No file chosen";
        }

        function updateFileNamen() {
            const fileInput = document.getElementById("storyFile");
            const fileName = document.getElementById("file-name");
            fileName.textContent = fileInput.files.length > 0 ? fileInput.files[0].name : "No file chosen";
        }


        function openModal() {
            document.getElementById("postModal").style.display = "flex";
        }

        function closeModal() {
            document.getElementById("postModal").style.display = "none";
        }

        function openUploadModal() {
            document.getElementById("uploadStoryModal").style.display = "flex";
        }

        function closeUploadModal() {
            document.getElementById("uploadStoryModal").style.display = "none";
        }

        function viewStory(url) {
            document.getElementById("storyImage").src = url;
            document.getElementById("storyModal").style.display = "flex";
        }

        function closeStoryModal() {
            document.getElementById("storyModal").style.display = "none";
        }

        window.onclick = function (event) {
            const postModal = document.getElementById("postModal");
            const storyModal = document.getElementById("storyModal");
            const uploadStoryModal = document.getElementById("uploadStoryModal");
            const notification = document.getElementById("notification-modal");
            const search=document.getElementById("search-modal");
            const friends=document.getElementById("friends-modal")

            if (event.target === postModal) {
                closeModal();
            } else if (event.target === storyModal) {
                closeStoryModal();
            } else if (event.target === uploadStoryModal) {
                closeUploadModal();
            }
            else if (event.target === notification) {
                closeNotificationModal();
        }
        else if (event.target === search) {
                closeSearchModal();
        }
       
    }
  

    function openSearchModal() {
    document.getElementById("search-modal").style.display = "flex";
    setActiveBackground('search'); // Highlight "Search Friends"
}
function closeSearchModal() {
    document.getElementById("search-modal").style.display = "none";
    resetStyles(); // Reset styles for all elements
}

        function openNotificationModal() {
    document.getElementById("notification-modal").style.display = "flex";
    setActiveBackground('notify'); // Highlight "Notifications"
}

function closeNotificationModal() {
    document.getElementById("notification-modal").style.display = "none";
    resetStyles(); // Reset styles for all elements
}




function setActiveBackground(targetId) {
    const sidebarItems = document.querySelectorAll('.sidebar ul li');

    // Remove the active class from all items
    // sidebarItems.forEach(item => item.classList.remove('active'));

    // Add the active class to the selected item's parent <li>
    const targetLi = document.getElementById(targetId)?.parentElement;
    if (targetLi) {
        targetLi.classList.add('active');
    }
}

function resetStyles() {
    // Simply remove the 'active' class from all items
    const sidebarItems = document.querySelectorAll('.sidebar ul li');
    sidebarItems.forEach(item => item.classList.remove('active'));
}




        async function searchUsers() {
            const query = document.getElementById('tab').value;
            if (!query) return document.getElementById('searchResults').innerHTML = '';

            try {
                const response = await fetch(`/home/search-users?query=${query}`);
                const users = await response.json();

                console.log("Users received:", users); // Log the received users on the client side

                const resultsList = document.getElementById('searchResults');
                resultsList.innerHTML = ''; // Clear previous results

                users.forEach(user => {
                    const li = document.createElement('li');

                    const img = document.createElement('img');
                    img.src=user.profileImage;
                    
                    // Display username or fallback to firstName
                    const usernameSpan = document.createElement('span');
                    const usernamelink = document.createElement('a');
                    usernamelink.href=`/home/profile/user/${user._id}`;
                    usernamelink.textContent=user.username;
                    usernameSpan.appendChild(usernamelink);
                    
                    // Create add/remove button based on friend status
                    const button = document.createElement('button');
                    button.textContent = user.isFriend ? '-' : '+';
                    button.onclick = () => user.isFriend ? removeFriend(user._id) : addFriend(user._id);

                    li.appendChild(img);
                    li.appendChild(usernameSpan);
                    li.appendChild(button);
                    resultsList.appendChild(li);
                });
            } catch (error) {
                console.error("Error searching users:", error);
            }
        }

        async function addFriend(userId) {
            try {
                const response = await fetch('/friend/send-request', { // Updated endpoint
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ targetUserId: userId })
                });

                if (response.ok) {
                    const result = await response.json();
                    alert(result.message); // Show message from server (e.g., "Friend request sent")
                    searchUsers(); // Refresh search results to update the + or - button
                    loadNotifications(); // Refresh notifications to reflect the new friend request sent
                } else {
                    const errorData = await response.json();
                    alert(errorData.message || 'Failed to send friend request.');
                }
            } catch (error) {
                console.error("Error sending friend request:", error);
                alert("An error occurred while sending the friend request.");
            }
        }

        async function removeFriend(friendId) {
            try {
                const response = await fetch('/friend/remove', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ friendId }),
                });
        
                if (response.ok) {
                    alert('Friend removed successfully');
                    await loadFriends(); // Refresh friends list
                } else {
                    const errorData = await response.json();
                    console.error("Failed to remove friend:", errorData.message);
                }
            } catch (error) {
                console.error("Error removing friend:", error);
            }
        }
        document.addEventListener('DOMContentLoaded', () => {
            loadFriends();
        });
        async function loadFriends() {
            try {
                const response = await fetch('/friend/list');
                const friends = await response.json();

                const friendsList = document.getElementById('friendsList');
                friendsList.innerHTML = ''; // Clear previous list

                friends.forEach(friend => {
                    const li = document.createElement('li');
                    li.textContent = friend.username || `${friend.firstName} ${friend.lastName}`;

                    // Button for removing friend
                    const removeButton = document.createElement('button');
                    removeButton.textContent = '-';
                    removeButton.onclick = () => removeFriend(friend._id);

                    li.appendChild(removeButton);
                    friendsList.appendChild(li);
                });
            } catch (error) {
                console.error("Error loading friends:", error);
            }
        }

        async function loadNotifications() { 
            try {
                const response = await fetch('/home/notifications'); // Fetch notifications from backend
                const notifications = await response.json(); // Parse response data
        
                const notificationsList = document.getElementById('notificationsList');
                notificationsList.innerHTML = ''; // Clear previous notifications
        
                notifications.forEach(notification => {
                    const li = document.createElement('li');
                    const senderName = notification.from?.username || notification.from?.firstName || "Unknown User";
                    
                    // // Create a link for the sender's name
                    // const senderName = document.createElement('a');
                    // senderName.href = `/home/profile/user/${notification.from?._id}`; // Link to user's profile
                    // senderName.textContent = sender;
                    // senderName.style.textDecoration = 'none';
                    // senderName.style.color = 'blue'; // Optional styling for the link

                    // Handle different notification types
                    switch (notification.type) {
                        case 'friend-request':
                            li.textContent = `Friend Request from ${senderName}`;
                            const acceptButton = document.createElement('button');
                            acceptButton.textContent = 'Accept';
                            acceptButton.className = 'accept-button';
                            acceptButton.onclick = () => handleAcceptRequest(notification._id);
                            
                            const declineButton = document.createElement('button');
                            declineButton.textContent = 'Decline';
                            declineButton.className = 'decline-button';
                            declineButton.onclick = () => handleDeclineRequest(notification._id);
                            
                            li.appendChild(acceptButton);
                            li.appendChild(declineButton);
                            break;
        
                        case 'friend-accepted':
                            li.textContent = `Friend Request accepted by ${senderName}`;
                            break;
        
                        case 'friend-declined':
                            li.textContent = `Friend Request declined by ${senderName}`;
                            break;
        
                        case 'post-like':
                            li.textContent = `${senderName} liked your post`;
                            break;
                            
                        case 'post-dislike':
                        li.textContent = `${senderName} disliked your post`;
                        break;
        
                        case 'story-like':
                            li.textContent = `${senderName} liked your story`;
                            break;
        
                        case 'comment':
                            li.textContent = `${senderName} commented on your post`;
                            break;
                        case 'comment-reply':
                        li.textContent = `${senderName} replied your comment`;
                        break;
        
                        case 'comment-like':
                            li.textContent = `${senderName} liked your comment`;
                            break;
                        case 'comment-dislike':
                        li.textContent = `${senderName} disliked your comment`;
                        break;
                        case 'reply-like':
                        li.textContent = `${senderName} disliked your comment`;
                        break;
                        case 'reply-dislike':
                        li.textContent = `${senderName} disliked your comment`;
                        break;
        
                        default:
                            li.textContent = `Unknown notification type from ${senderName}`;
                            break;
                    }
        
                    // Add delete button for all notifications
                    const deleteButton = document.createElement('button');
                    deleteButton.textContent = 'Delete';
                    deleteButton.className = 'delete-button';
                    deleteButton.onclick = () => deleteNotification(notification._id);
        
                    li.appendChild(deleteButton);
                    notificationsList.appendChild(li);
                });
            } catch (error) {
                console.error("Error loading notifications:", error);
            }
        }
        
        
        async function deleteNotification(notificationId) {
            try {
                const response = await fetch(`/notifications/notifications/${notificationId}`, {
                    method: 'DELETE',
                });
        
                if (response.ok) {
                    alert("Notification deleted successfully");
                    await loadNotifications(); // Reload notifications after deletion
                } else {
                    const errorData = await response.json();
                    console.error("Failed to delete notification:", errorData.message);
                }
            } catch (error) {
                console.error("Error deleting notification:", error);
            }
        }
        
        async function handleAcceptRequest(notificationId) {
            try {
                const response = await fetch('/friend/accept-request', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ notificationId }),
                });
        
                if (response.ok) {
                    alert("Friend request accepted successfully");
                    await loadNotifications();
                    await loadFriends(); // Reload friends list
                }
            } catch (error) {
                console.error("Error accepting friend request:", error);
            }
        }
        
        async function handleDeclineRequest(notificationId) {
            try {
                const response = await fetch('/friend/decline-request', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ notificationId }),
                });
        
                if (response.ok) {
                    alert("Friend request declined successfully");
                    await loadNotifications();
                }
            } catch (error) {
                console.error("Error declining friend request:", error);
            }
        }
        
        // Call the loadNotifications function on page load
        loadNotifications();
        

        loadFriends();

        async function toggleLike(event, postId) {
            event.stopPropagation();
            try {
                const response = await fetch(`/posts/${postId}/like`, { method: 'POST' });
                const data = await response.json();

                // Update the like count
                document.getElementById(`likes-count-${postId}`).textContent = `${data.likesCount} Likes`;

                // If the likes modal is open, update it
                 if (document.getElementById('likes-modal').style.display === 'block') {
                    populateLikesModal(data.likedBy);
                }
            } catch (error) {
                console.error("Error toggling like:", error);
            }
        }
        async function toggledisLike(event, postId) {
            event.stopPropagation();
            try {
                const response = await fetch(`/posts/${postId}/dislike`, { method: 'POST' });
                const data = await response.json();

                // Update the like count
                document.getElementById(`dislikes-count-${postId}`).textContent = `${data.dislikesCount} DisLikes`;
            } catch (error) {
                console.error("Error toggling like:", error);
            }
        }

        function openCommentSection(postId) {
            const commentSection = document.getElementById(`commentSection-${postId}`);
            
            if (commentSection.style.display === 'none' || commentSection.style.display === '') {
                // Load comments only if the section is being opened
                loadComments(postId);
                commentSection.style.display = 'block';
            } else {
                // Toggle visibility to close the comment section
                commentSection.style.display = 'none';
            }
        }

        async function loadComments(postId) {
  try {
    const response = await fetch(`/posts/${postId}`);
    const data = await response.json();

    const commentsList = document.getElementById(`comments-list-${postId}`);
    commentsList.innerHTML = data.comments.map((comment) => `
      <li>
        <img src="${comment.user.profileImage || '/images/default-profile.png'}" 
             alt="${comment.user.username}'s profile image" 
             style="width: 30px; height: 30px; border-radius: 50%; margin-right: 5px;">
        <strong>${comment.user.username}:</strong> ${comment.content}
        <span>
          <button onclick="toggleCommentLike('${comment._id}')">❤️</button>
          <span id="comment-likes-${comment._id}" onclick="openReactionModal('comment','${comment._id}', 'likes')">${comment.likesCount} Likes</span>
          <button onclick="toggleCommentdisLike('${comment._id}')">❤️</button>
          <span id="comment-dislikes-${comment._id}" onclick="openReactionModal('comment','${comment._id}', 'dislikes')">${comment.dislikesCount} Dislikes</span>
        </span>
        ${comment.isOwner ? `<button onclick="confirmDelete('comment', '${comment._id}')">Delete Comment</button>` : ''}
        <button onclick="toggleReplyBox('${comment._id}')">Reply</button>

        <div id="reply-box-${comment._id}" class="reply-box" style="display: none; margin-top: 10px;">
          <input type="text" id="new-reply-${comment._id}" placeholder="Write a reply...">
          <button onclick="addReply('${comment._id}')">Post Reply</button>
        </div>

        <ul id="replies-list-${comment._id}" class="replies-list" style="margin-top: 10px; padding-left: 20px;">
          ${comment.replies.map((reply) => `
            <li>
              <img src="${reply.user.profileImage || '/images/default-profile.png'}" 
                   alt="${reply.user.username}'s profile image" 
                   style="width: 25px; height: 25px; border-radius: 50%; margin-right: 5px;">
              <strong>${reply.user.username}:</strong> ${reply.content}
              <span>
                <button onclick="toggleReplyLike('${comment._id}', '${reply._id}')">❤️</button>
                <span id="reply-likes-${reply._id}" onclick="openReactionModal('reply','${reply._id}', 'likes')">${reply.likesCount} Likes</span>
                <button onclick="toggleReplydisLike('${comment._id}', '${reply._id}')">❤️</button>
                <span id="reply-dislikes-${reply._id}" onclick="openReactionModal('reply','${reply._id}', 'dislikes')">${reply.dislikesCount} Dislikes</span>
                ${reply.isOwner ? `<button onclick="confirmDelete('reply', '${reply._id}')">Delete Reply</button>` : ''}
              </span>
            </li>
          `).join('')}
        </ul>
      </li>
    `).join('');
  } catch (error) {
    console.error('Error loading comments:', error);
  }
}



        async function addComment(postId) {
            const commentText = document.getElementById(`new-comment-${postId}`).value.trim();
            if (!commentText) return;

            try {
                const response = await fetch(`/posts/${postId}/comment`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ content: commentText }),
                });

                if (response.ok) {
                    loadComments(postId); // Reload comments after posting a new one
                    document.getElementById(`new-comment-${postId}`).value = ''; // Clear input
                }
            } catch (error) {
                console.error("Error adding comment:", error);
            }
        }


        function toggleReplyBox(commentId) {
            const replyBox = document.getElementById(`reply-box-${commentId}`);
            replyBox.style.display = replyBox.style.display === 'none' || replyBox.style.display === '' ? 'block' : 'none';
        }

        async function addReply(commentId) {
  const replyInput = document.getElementById(`new-reply-${commentId}`);
  const replyText = replyInput.value.trim();

  if (!replyText) return;

  try {
    const response = await fetch(`/comments/${commentId}/reply`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ content: replyText }),
    });

    if (response.ok) {
      const newReply = await response.json(); // Get the newly created reply data
      replyInput.value = ''; // Clear the input field

      // Dynamically add the new reply to the DOM
      const repliesList = document.getElementById(`replies-list-${commentId}`);
      if (repliesList) {
        const replyHTML = `
          <li id="reply-${newReply._id}">
            <img src="${newReply.user.profileImage || '/images/default-profile.png'}" 
                 alt="${newReply.user.username}'s profile image" 
                 style="width: 25px; height: 25px; border-radius: 50%; margin-right: 5px;">
            <strong>${newReply.user.username}:</strong> ${newReply.content}
            <span>
              <button onclick="toggleReplyLike('${commentId}', '${newReply._id}')">❤️</button>
              <span id="reply-likes-${newReply._id}" onclick="openReactionModal('reply','${newReply._id}', 'likes')">0 Likes</span>
              <button onclick="toggleReplydisLike('${commentId}', '${newReply._id}')">❤️</button>
              <span id="reply-dislikes-${newReply._id}" onclick="openReactionModal('reply','${newReply._id}', 'dislikes')">0 Dislikes</span>
                ${newReply.isOwner ? `<button onclick="confirmDelete('reply', '${newReply._id}')">Delete Reply</button>` : ''}
            </span>
          </li>
        `;
        repliesList.insertAdjacentHTML('beforeend', replyHTML); // Add the new reply to the list
        
      }
    } else {
      console.error('Error adding reply:', await response.text());
    }
  } catch (error) {
    console.error('Error adding reply:', error);
  }
}



        async function toggleCommentLike(commentId) {
            try {
                const response = await fetch(`/comments/${commentId}/like`, { method: 'POST' });
                const data = await response.json();

                // Update the like count dynamically
                const likeCountElement = document.getElementById(`comment-likes-${commentId}`);
                if (likeCountElement) {
                    likeCountElement.textContent = `${data.likesCount} Likes`;
                }
            } catch (error) {
                console.error("Error toggling comment like:", error);
            }
        }
        async function toggleCommentdisLike(commentId) {
            try {
                const response = await fetch(`/comments/${commentId}/dislike`, { method: 'POST' });
                const data = await response.json();

                // Update the like count dynamically
                const dislikeCountElement = document.getElementById(`comment-dislikes-${commentId}`);
                if (dislikeCountElement) {
                    dislikeCountElement.textContent = `${data.dislikesCount} DisLikes`;
                }
            } catch (error) {
                console.error("Error toggling comment dislike:", error);
            }
        }

        async function toggleReplyLike(commentId, replyIndex) {
            try {
        console.log("mohammad",replyIndex);

                const response = await fetch(`/comments/${commentId}/replies/${replyIndex}/like`, { method: 'POST' });
                const data = await response.json();

                // Update the like count dynamically
                const likeCountElement = document.getElementById(`reply-likes-${replyIndex}`);
                if (likeCountElement) {
                    likeCountElement.textContent = `${data.likesCount} Likes`;
                }
            } catch (error) {
                console.error("Error toggling reply like:", error);
            }
        }
        async function toggleReplydisLike(commentId, replyIndex) {
            try {
        console.log("mohammad",replyIndex);

                const response = await fetch(`/comments/${commentId}/replies/${replyIndex}/dislike`, { method: 'POST' });
                const data = await response.json();

                // Update the like count dynamically
                const dislikeCountElement = document.getElementById(`reply-dislikes-${replyIndex}`);
                if (dislikeCountElement) {
                    dislikeCountElement.textContent = `${data.dislikesCount} Likes`;
                }
            } catch (error) {
                console.error("Error toggling reply Dislike:", error);
            }
        }
        
        async function loadFriendSuggestions() {
            try {
                const response = await fetch('/friend/suggestions');
                const suggestions = await response.json();
        
                const suggestionsList = document.getElementById('suggestionsList');
                suggestionsList.innerHTML = ''; // Clear previous suggestions
        
                if (!suggestions || suggestions.length === 0) {
                    suggestionsList.innerHTML = '<li>No suggestions available</li>';
                    return;
                }
        
                suggestions.forEach(suggestion => {
                    const li = document.createElement('li');
                    li.className = 'suggestion-item'; // Add a class for styling
                    li.innerHTML = `
                        <img src="${suggestion.profileImage || '/path/to/default-profile.png'}" alt="Profile Image" class="suggestion-image">
                        <span class="suggestion-username">${suggestion.username}</span>
                        <button class="add-friend-btn" onclick="sendFriendRequest('${suggestion._id}')">Add Friend</button>
                    `;
                    suggestionsList.appendChild(li);
                });
            } catch (error) {
                console.error("Error loading friend suggestions:", error);
            }
        }
        loadFriendSuggestions();        

        function showLikes() {
  document.getElementById('likes-section').style.display = 'block';
  document.getElementById('dislikes-section').style.display = 'none';
  document.getElementById('likes-tab').classList.add('active');
  document.getElementById('dislikes-tab').classList.remove('active');
}

function showDislikes() {
  document.getElementById('likes-section').style.display = 'none';
  document.getElementById('dislikes-section').style.display = 'block';
  document.getElementById('dislikes-tab').classList.add('active');
  document.getElementById('likes-tab').classList.remove('active');
}

async function openReactionModal(type, id, section) {
  const modal = document.getElementById('reaction-modal');
  modal.style.display = 'flex';

  try {
    const response = await fetch(`/posts/${type}/${id}/reactions`);
    const data = await response.json();
    if (response.ok) {
      populateLikesList(data.likedBy);
      populateDislikesList(data.dislikedBy);

      // Show the appropriate section based on the clicked button
      if (section === 'likes') {
        showLikes();
      } else if (section === 'dislikes') {
        showDislikes();
      }
    } else {
      console.error('Error fetching reactions:', data.message || 'Unknown error');
    }
  } catch (error) {
    console.error('Error fetching reactions:', error);
  }
}


function closeReactionModal() {
  document.getElementById('reaction-modal').style.display = 'none';
}

function populateLikesList(likedBy) {
  const likesList = document.getElementById('likes-list');
  likesList.innerHTML = ''; // Clear previous list

  likedBy.forEach(user => {
    const listItem = document.createElement('li');
    listItem.style.display = 'flex';
    listItem.style.alignItems = 'center';
    listItem.style.marginBottom = '10px';

    const img = document.createElement('img');
    img.src = user.profileImage;
    img.alt = `${user.username}'s profile image`;
    img.style.width = '40px';
    img.style.height = '40px';
    img.style.borderRadius = '50%';
    img.style.marginRight = '10px';

    const username = document.createElement('span');
    username.textContent = user.username;

    listItem.appendChild(img);
    listItem.appendChild(username);
    likesList.appendChild(listItem);
  });
}

function populateDislikesList(dislikedBy) {
  const dislikesList = document.getElementById('dislikes-list');
  dislikesList.innerHTML = ''; // Clear previous list

  dislikedBy.forEach(user => {
    const listItem = document.createElement('li');
    listItem.style.display = 'flex';
    listItem.style.alignItems = 'center';
    listItem.style.marginBottom = '10px';

    const img = document.createElement('img');
    img.src = user.profileImage;
    img.alt = `${user.username}'s profile image`;
    img.style.width = '40px';
    img.style.height = '40px';
    img.style.borderRadius = '50%';
    img.style.marginRight = '10px';

    const username = document.createElement('span');
    username.textContent = user.username;

    listItem.appendChild(img);
    listItem.appendChild(username);
    dislikesList.appendChild(listItem);
  });
}

    let deleteType = '';
    let deleteId = '';

    function confirmDelete(type, id) {
        deleteType = type;
        deleteId = id;
        document.getElementById('delete-modal').style.display = 'block';
    }

    function closeDeleteModal() {
        document.getElementById('delete-modal').style.display = 'none';
    }

    async function performDelete(postid) {
        try {
            const response = await fetch(`/posts/delete/${deleteType}/${deleteId}`, { method: 'DELETE' });
            if (response.ok) {
                alert("Deleted successfully");
                if(deleteType=='comment' || deleteType=='reply')
                    loadComments(postid);
                else
                    location.reload();
            } else {
                console.error("Error deleting:", await response.json());
            }
        } catch (error) {
            console.error("Error performing delete:", error);
        }
        closeDeleteModal();
    }
    </script>
</body>

</html>