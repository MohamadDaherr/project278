<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Home - Social Media</title>
    <link rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">


<style>
        /* Global Styles */
        ::-webkit-scrollbar {
            display: none;
            /* Hide the scrollbar */
        }

        body,
        html {
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #e0e7f8;
            overflow-x: hidden;
            /* Prevents horizontal scrolling */
        }

        .search {
            display: block;
        }

        .container {
            display: flex;
            height: 100vh;
            padding: 10px 10px;
            justify-content: space-between;
        }


        /* Sidebar Styling */
        .right-sidebar {
            width: 18%;
            /* Sidebar width */
            height: calc(100vh - 20px);
            /* Full viewport height minus padding */
            padding: 20px;
            background-color: #ffffff;
            /* Solid white background */
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            /* Subtle shadow */
            border-radius: 10px;
            /* Rounded corners */
            position: fixed;
            /* Fix sidebar position */
            transition: transform 0.3s ease;
        }

        /* Left Sidebar Positioned Fixed */


        .sidebar {
            width: 18%;
            /* Fixed width to match the profile link */


            padding-top: 0px;
            padding-bottom: 0px;
            background-color: #ffffff;
            /* Same background as the profile link */
            /* box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); Same shadow as the profile link */
            border-radius: 20px;
            /* Same rounded corners as the profile link */
            position: fixed;
            /* Fix sidebar position */
            transition: transform 0.3s ease;
            top: 220px;
            /* Place it below the profile link */
            left: 10px;
        }


           
        

        /* Right Sidebar Positioned Fixed */
        .right-sidebar {
            top: 10px;
            right: 10px;
           
        }


        /* Sidebar Items Styling */
        .sidebar ul,
        .right-sidebar ul {
            padding: 0; /* Ensure no extra padding around ul */
    margin: 0; /* Remove margin */
    width: 100%; /* Set ul to full width */
    list-style: none; /* Remove bullets */
        }

      .sidebar ul li,
        .right-sidebar ul li {
            /* margin: 10px 0; */
            font-weight: bold;
            padding-top: 7px;
            padding-bottom: 7px;
            padding-left: 20px;
            padding-right: 20px;
            position: relative;
            
            /* Add space for the left bar */
        }




.sidebar i{
    padding-right: 8px;
}
.sidebar ul {
    width: 100%; /* Set the ul to occupy full sidebar width */
    padding: 10px; /* Add padding around ul */
    background-color: #ffffff; /* Optional: Different background for ul */
    border-radius: 12px; /* Optional: Rounded corners for ul */
    list-style: none; /* Remove bullet points */
    box-sizing: border-box; /* Ensure padding doesn't overflow */
}

.sidebar ul li {
    height: auto; /* Allow flexible height */
    line-height: 1.5; /* Adjust line height for better spacing */
    width: 80%; /* Make li smaller than ul */
    margin: 5px auto; /* Center the li elements horizontally */
    padding: 10px; /* Add padding for a better appearance */
    background-color: rgb(243, 243, 243); /* Background for li */
    border-radius: 10px; /* Rounded corners for li */
    text-align: left; /* Align text inside the li */
    transition: all 0.3s ease-in-out; /* Smooth transitions on hover */
    margin-top: 10px;
}

.sidebar ul li a {
    display: block; /* Make the link fill the list item */
    color: #389c9c; /* Text color */
    text-decoration: none; /* Remove underline */
    font-size: 18px; /* Slightly larger font for readability */
    border-radius: 8px; /* Optional: rounded corners for a */
    transition: background-color 0.3s ease, color 0.3s ease; /* Smooth hover transition */
}

.sidebar ul li:hover {
    transform: scale(1.05); /* Slightly scale li on hover */
    background-color: #ddd; /* Change li background on hover */
}

/* Profile Link Styling */
.profile-link {
    width: 16.5%; /* Adjust width dynamically */
    background-color: #ffffff;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    border-radius: 10px;
    text-decoration: none;
    color: #333;
    display: flex;
    align-items: center;
    position: fixed;
    top: 10px;
    left: 10px;
    padding: 10px; /* Reduce padding for better shrinkability */
    transition: all 0.3s ease;
}

/* Profile Picture */
.profile-picture {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    overflow: hidden;
    flex-shrink: 0; /* Prevent the image from shrinking */
}

.profile-picture img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

/* Profile Name */
.profile-name {
    font-size: 18px;
    font-weight: bold;
    color: #333;
    margin-left: 10px; /* Space between name and picture */
    transition: opacity 0.3s ease; /* Smooth transition for visibility */
}

/* Media Query for Shrinking */
@media (max-width: 900px) {
    .profile-link {
        width: 50px; /* Match the profile picture size */
        padding: 0; /* Remove extra padding */
        top: 10px; /* Adjust top position */
        left: 10px; /* Adjust left position */
        justify-content: center; /* Center align the picture */
    }

    .profile-name {
        display: none; /* Hide the profile name */
    }

    .profile-picture {
        width: 40px; /* Slightly smaller for mobile view */
        height: 40px;
    }
}

        .profile-link:hover {
            background-color: #f0f2f5;
        }
        .create-post-link {
    padding: 20px;
    width: 15%;
    background-color: #389c9c;
    box-shadow: 2px 4px 12px rgba(0, 0, 0, 0.5);
    border-radius: 30px;
    text-decoration: none;
    color: white;
    display: flex;
    align-items: center;
    justify-content: center; /* Center the text inside the button */
    position: fixed;
    top: 130px;
    left: 10px;
    transition: all 0.3s ease; /* Smooth shrinking */
}

        .create-post-link:hover {
            background-color: #1f7878;
            transform: scale(1.03);
            /* Scale the button slightly larger */
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);
            /* Add a shadow to give depth */
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            /* Smooth animation */
        }


        .profile-picture {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            overflow: hidden;
            margin-right: 10px;
        }

        .profile-picture img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }




        /* Feed Section */
        .feed {
            width: 60%;
            padding: 20px;
            margin-left: 20%;
            /* Leaves space for fixed left sidebar */
            margin-right: 20%;
            /* Leaves space for fixed right sidebar */
        }

        /* Story Carousel */
.story-carousel {
    display: flex;
    align-items: center;
    gap: 15px;
    padding: 10px;
    overflow-x: auto;
    white-space: nowrap;
    background-color: #fff;
    border-radius: 10px;
    width: 90%;
    border-bottom: 1px solid #dbdbdb;
}
/* User name styling */
.story-details {
    position: absolute;
    top: 10px;
    transform: translateX(-50%);
    color: white;
    font-size: 16px;
    font-weight: bold;
    text-shadow: 0px 0px 5px rgba(0, 0, 0, 0.7);
    z-index: 1020;
}

.story {
    text-align: center;
    cursor: pointer;
}

.story-image-wrapper {
    width: 70px;
    height: 70px;
    margin: auto;
    border-radius: 50%; /* Makes it a circle */
    overflow: hidden;
    background: linear-gradient(45deg, #ff9a9e, #fad0c4, #fbc2eb, #a6c1ee, #89f7fe, #fbc2eb); /* Multicolor gradient */
    background-size: 200% 200%; /* Double the size for animation */
    border: 3px solid transparent; /* Create space for the gradient border */
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative; /* Needed for pseudo-element */
    animation: gradient-animation 3s infinite; /* Gradient animation */
}

.story-image-wrapper img {
    border-radius: 50%; /* Ensures the image is a circle */
    width: 100%;
    height: 100%;
    object-fit: cover;
    position: relative; /* To sit inside the circle */
    z-index: 1; /* Ensures the image is above the pseudo-element */
}

/* Optional: Add a glowing animation around the border */
@keyframes gradient-animation {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}

.story p {
    margin-top: 5px;
    font-size: 12px;
    color: #262626;
}



        /* Modal Styling */
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background-color: #ffffff;
            padding: 20px;
            border-radius: 8px;
            width: 80%;
            max-width: 500px;
            position: relative;
        }

        .modal-content img {
    width: 100%;
    max-height: 70vh;
    object-fit: contain;
    border-radius: 10px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
}

/* Arrows for navigation */
.nav-arrow {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(0, 0, 0, 0.5);
    color: #fff;
    border: none;
    border-radius: 50%;
    padding: 10px 15px;
    cursor: pointer;
    font-size: 18px;
    z-index: 1010;
    display: flex;
    justify-content: center;
    align-items: center;
}

.left-arrow {
    left: 10px;
}

.right-arrow {
    right: 10px;
}

.nav-arrow:hover {
    background: rgba(0, 0, 0, 0.8);
}
 

        .close:hover {
            color: black;
        }

        .create-post-box:hover {
            box-shadow: 0 6px 18px rgba(0, 0, 0, 0.2);
        }

        /* Post Button Styling */
        .post-button {
            width: 100%;
            padding: 10px;
            background-color: #389c9c;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.3s;
            /* Add transform transition */
        }

        .post-button:hover {
            background-color: #1f7878;
            transform: translateY(-3px);
            /* Moves the button up slightly to create a "pop" effect */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            /* Adds a shadow to enhance the lift effect */
        }





        #caption {
            width: 100%;
            height: 100px;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 16px;
            resize: none;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
            color: #333;
            background-color: #f9f9f9;
            transition: border-color 0.3s ease;
        }

        #caption:focus {
            border-color: #1f7878;
            outline: none;
            background-color: #fff;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
        }

        /* Hide the original file input */
        input[type="file"] {
            display: none;
        }

        /* Container styling */
        .custom-file-upload {
            display: flex;
            align-items: center;
            border: 1px solid #ccc;
            border-radius: 5px;
            padding: 8px 10px;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        /* Style for the custom upload button */
        .upload-button {
            padding: 8px 15px;
            background-color: #007bff;
            color: #fff;
            border-radius: 5px;
            cursor: pointer;
            margin-right: 10px;
            font-size: 14px;
            transition: background-color 0.3s ease;
            text-align: center;
        }

        .upload-button:hover {
            background-color: #0056b3;
        }

        /* Style for the file name display */
        #file-name {
            font-size: 14px;
            color: #666;
            flex-grow: 1;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        /* From Uiverse.io by Yaya12085 */
        .radio-inputs {
            position: relative;
            display: flex;
            flex-wrap: wrap;
            border-radius: 0.5rem;
            background-color: #EEE;
            box-sizing: border-box;
            box-shadow: 0 0 0px 1px rgba(0, 0, 0, 0.06);
            padding: 0.25rem;
            width: 300px;
            font-size: 14px;
        }

        .radio-inputs .privacy {
            flex: 1 1 auto;
            text-align: center;
        }

        .radio-inputs .privacy input {
            display: none;
        }

        .radio-inputs .privacy .name {
            display: flex;
            cursor: pointer;
            align-items: center;
            justify-content: center;
            border-radius: 0.5rem;
            border: none;
            padding: .5rem 0;
            color: rgba(51, 65, 85, 1);
            transition: all .15s ease-in-out;
        }

        .radio-inputs .privacy input:checked+.name {
            background-color: #fff;
            font-weight: 600;
        }

        .notifications-link {
            cursor: pointer;
        }

        #searchTab {
            cursor: pointer;
        }

        .button {
            color: #007bff;
            outline: none;
            border: none;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            position: absolute;
            /* Set the button to absolute positioning */
            bottom: 30px;
            /* Position at the bottom of the sidebar with some padding */
            left: 5%;
            /* Center horizontally within the sidebar */
        }



        .icon {
            width: 30px;
            /* Adjusting width directly for SVG scaling */
            height: 30px;
        }


        /* From Uiverse.io by alexruix */
        .group {
            display: flex;
            line-height: 28px;
            align-items: center;
            position: relative;
            max-width: 500px;
        }

        .input {
            width: 100%;
            height: 40px;
            line-height: 28px;
            padding: 0 1rem;
            padding-left: 2.5rem;
            border: 2px solid transparent;
            border-radius: 8px;
            outline: none;
            background-color: #f3f3f4;
            color: #0d0c22;
            transition: .3s ease;
        }

        .input::placeholder {
            color: #9e9ea7;
        }

        .input:focus,
        input:hover {
            outline: none;
            border-color: #007bff;
            background-color: #fff;
            box-shadow: 0 0 0 4px #8ec5ff;
        }

        .icon {
            position: absolute;
            left: 1rem;
            fill: #9e9ea7;
            width: 1rem;
            height: 1rem;
        }





        /* Post Section Styling */
        .posts h2 {
            font-size: 20px;
            color: #333;
            border-bottom: 2px solid #ddd;
            padding-bottom: 10px;
            margin-bottom: 20px;
        }

        .post {
            background-color: #ffffff;
            padding: 15px;
            margin-bottom: 20px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            border-radius: 10px;
        }

        .post img {
            max-width: 100%;
            border-radius: 8px;
            margin-top: 10px;
        }

        .privacy-level {
            font-size: 12px;
            color: #888;
            margin-top: 10px;
        }

        .sidebar ul li.active::before {
            content: "";
            /* Adds an empty content block */
            position: absolute;
            /* Positions the pseudo-element relative to the li */
            left: 0;
            /* Align it to the left of the li */
            top: 0;
            /* Start from the top of the li */
            height: 100%;
            /* Match the full height of the li */
            width: 5px;
            /* Width of the blue bar */
            background-color: #007bff;
            /* Blue color for the bar */
            border-radius: 4px 0 0 4px;
            /* Optional: rounded edges */
        }



        .commentSection {
            margin-top: 10px;
            border-top: 1px solid #dbdbdb;
            padding-top: 10px;
            max-height: 200px;
            overflow-y: auto;
        }




        /* Close button styling */
        .close {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 20px;
            font-weight: bold;
            cursor: pointer;
            color: #333;
        }

        /* Tabs styling */
        .tabs {
            display: flex;
            justify-content: space-around;
            margin-bottom: 15px;
        }

        .tabs button {
            flex: 1;
            padding: 10px;
            background-color: #f0f4ff;
            border: none;
            border-radius: 5px;
            color: #007bff;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }


        .tabs button.active {
            background-color: #007bff;
            color: white;
        }

        .tabs button:hover {
            background-color: #0056b3;
            color: white;
        }


        /* Tab content styling */
        .tab-content h3 {
            margin-bottom: 15px;
            color: #333;
        }

        .tab-content ul {
            list-style: none;
            padding: 0;
        }

        .tab-content ul li {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        .tab-content ul li img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .tab-content ul li span {
            font-weight: bold;
            color: #333;
        }

        #confirm-delete {
            background-color: #d9534f;
            color: #fff;
        }

        #cancel-delete {
            background-color: #5bc0de;
            color: #fff;
        }

        /* Remove default list styling */
        #searchResults {
            list-style-type: none;
            /* Remove bullet points */
            padding: 0;
            /* Remove padding from the list */
            margin: 0;
            /* Remove margin from the list */
        }

        #searchResults li {
            list-style-type: none;
            /* Ensure individual list items have no bullets */
            margin: 10px 0;
            /* Optional: Add spacing between items */
            border-bottom: 1px solid #ccc;
            /* Thin gray line between items */

        }

        /* Search Item Styling */
        .search-item {
            margin-bottom: 10px;
        }

        /* Search Card Layout */
        .search-card {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 10px;
            background-color: #ffffff;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.01);
            transition: background-color 0.3s, transform 0.2s;
            cursor: pointer;
        }

        .search-card:hover {
            background-color: #f0f4ff;
            transform: translateY(-2px);
        }

        .search-image {
    width: 40px !important; /* Adjust the size as needed */
    height: 40px !important;
    border-radius: 50% !important; /* Makes it perfectly round */
    object-fit: cover !important; /* Ensures the image fits within the circle without distortion */
}


        /* Search Info */
        .search-info {
            flex: 1;
        }


        .search-username {
            margin-left: 15px;
            font-weight: bold;
            color: black;
            text-decoration: none;
        }

        /* Add Friend Button */
        .add-friend-btn {
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 50%;
            padding: 5px 10px;
            font-size: 14px;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.2s;
        }

        .add-friend-btn:hover {
            background-color: #0056b3;
            transform: scale(1.05);
        }
/* Like Button Styles */
.like-icon input {
    position: absolute;
    opacity: 0; /* Hide the checkbox */
    cursor: pointer;
    height: 0;
    width: 0;
}

.like-icon {
    display: inline-block;
    position: relative;
    cursor: pointer;
    font-size: 25px; /* Adjust icon size */
    user-select: none;
    transition: transform 0.2s ease; /* Smooth hover scaling */
}

/* Default state */
.checkmark {
    display: flex;
    align-items: center;
    justify-content: center;
    height: auto; /* Auto size to match the icon */
    width: auto;
    background: none; /* Remove background */
    border: none; /* Remove border */
    transition: fill 0.3s ease, transform 0.2s ease; /* Smooth color and scaling */
}

.checkmark svg {
    width: 1.4em; /* Scale SVG size */
    height: 1.4em;
    fill: #ccc; /* Default grey icon */
    transition: fill 0.3s ease; /* Smooth color transition */
}

/* Hover effect */
.like-icon:hover .checkmark svg {
    transform: scale(1.1); /* Slightly enlarge the icon on hover */
}

/* Checked (liked) state */
.like-icon input:checked ~ .checkmark svg {
    fill: #007bff; /* Bright blue icon when liked */
}

/* Unchecked (unliked) state */
.like-icon input:not(:checked) ~ .checkmark svg {
    fill: #cccccc; /* Grey icon when unliked */
}

/* Animations for Like and Dislike */
@keyframes like-animation {
    0% {
        transform: scale(0.9);
    }
    50% {
        transform: scale(1.2);
    }
    100% {
        transform: scale(1);
    }
}

.story-reactions {
    margin-top: 10px;
    display: flex;
    justify-content: center;
    gap: 20px;
}

.reaction-button {
    background-color: transparent;
    border: none;
    font-size: 18px;
    cursor: pointer;
    color: white;
    text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
}

.reaction-button span {
    margin-left: 5px;
    font-size: 16px;
}

/* Notification Modal Scroll Styling */
#notification-modal .modal-content {
    max-height: 70vh; /* Set a fixed height */
    width: 50%; /* Set a width as per your design */
    overflow-y: auto; /* Enable vertical scrolling */
    overflow-x: hidden; /* Prevent horizontal scrolling */
    padding: 20px; /* Add padding for the content */
    box-sizing: border-box; /* Include padding and borders in size calculations */
    background-color: #ffffff; /* Background color of the modal */
    border-radius: 10px; /* Rounded corners */
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25); /* Subtle shadow */
}

/* Custom Scrollbar Styling */
#notification-modal .modal-content::-webkit-scrollbar {
    width: 10px; /* Width of the scrollbar track */
}

#notification-modal .modal-content::-webkit-scrollbar-track {
    background: #f0f4ff; /* Light background for the scrollbar track */
    border-radius: 10px; /* Rounded corners for the track */
}

#notification-modal .modal-content::-webkit-scrollbar-thumb {
    background-color: #007bff; /* Bright blue scrollbar */
    border-radius: 10px; /* Rounded corners for the scrollbar */
    border: 2px solid #f0f4ff; /* Add a border for a smooth edge */
}

#notification-modal .modal-content::-webkit-scrollbar-thumb:hover {
    background-color: #0056b3; /* Darker blue on hover */
    border: 2px solid #e0e7f8; /* Update border on hover */
}

/* Optional Scrollbar Styling for Cross-Browser Support */
#notification-modal .modal-content {
    scrollbar-width: thin; /* For Firefox: thin scrollbar */
    scrollbar-color: #007bff #f0f4ff; /* Blue thumb and light track */
}

/* Default state for the profile link and create post button */
.profile-link, .create-post-link {
    transition: transform 0.3s ease, opacity 0.3s ease;
    /* Smooth transition for transform and opacity */
}


/* Adjust for smaller screens */
@media (max-width: 900px) {
    .sidebar ul li {
        padding: 10px; /* Add padding for smaller screens */
        font-size: 14px; /* Adjust font size */
    }

    .sidebar ul li a {
        font-size: 14px; /* Adjust font size for links */
    }
}
/* Media Query to Collapse Sidebars on Smaller Screens */
@media (max-width: 900px) {
    .sidebar {
        transform: translateX(-100%); /* Hide the sidebar by moving it off-screen */
    }

    .right-sidebar {
        transform: translateX(100%); /* Hide the right sidebar by moving it off-screen */
    }

    .feed {
        width: 100%; /* Expand the feed to full width */
        margin-left: 0; /* Remove left margin */
        margin-right: 0; /* Remove right margin */
    }
}

@media (max-width: 900px) {
    .create-post-link {
        transform: translateX(-100%); /* Hide the sidebar by moving it off-screen */
    }
}
/* General Styling */
body {
    font-family: Arial, sans-serif;
    background-color: #f5f5f5;
    margin: 0;
    padding: 0;
}

.posts {
    width: 90%;
    max-width: 800px;
    color: #333;
}

/* Heading */
.posts-heading {
    font-size: 24px;
    font-weight: bold;
    margin-bottom: 20px;
    text-align: center;
}

/* Post Styling */
.post {
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 10px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

/* Post Header */
.post-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 15px;
}

.post-author-image-container {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 15px;
}

.post-author-image {
    width: 50px; /* Adjust size as needed */
    height: 50px; /* Ensure it's equal to width for a perfect circle */
    border-radius: 50%; /* Makes the image round */
    object-fit: cover; /* Ensures the image fits without being cut */
    overflow: hidden; /* Prevents overflow if any */
}


.post-author-details {
    flex: 1;
}

.post-author-username {
    position: relative;
    top: 10px;
    font-size: 16px;
    font-weight: bold;
    color: black;
    text-decoration: none;
}


/* Username Hover Effect */
.post-author-username:hover {
    font-size: 17px; /* Slightly larger */
    color: black; /* A brighter blue shade */
    text-shadow: 0px 0px 5px rgba(0, 0, 0, 0.2); /* Adds a subtle glow effect */
    transition: all 0.3s ease; /* Smooth transition for the effect */
}


.post-date {
    font-size: 14px;
    color: #777;
}

/* Delete Button */
.post-delete-button {
    
    background-color: transparent;
    border: none;
    cursor: pointer;
    color: black;
    font-size: 16px;
    transition: color 0.3s ease;
}

.post-delete-button:hover {
    color: red;
}

/* Post Content */
.post-content {
    margin: 15px 0;
}
.post-caption {
    font-size: 16px;
    margin-bottom: 10px;
    word-wrap: break-word; /* Break long words to prevent overflow */
    white-space: pre-wrap; /* Preserve line breaks and allow wrapping */
    overflow-wrap: break-word; /* Break words if necessary */
}


.post-media {
    width: 100%;
    border-radius: 10px;
    object-fit: cover;
    margin-top: 10px;
}

/* Post Actions */
.post-actions {
    display: flex;
    gap: 15px;
    margin-top: 10px;
    color: black;
}
.post-actions span{
    cursor: default;
}

.reaction-button {
    display: flex;
    align-items: center;
    gap: 5px;
    background: none;
    border: none;
    cursor: pointer;
    font-size: 16px;
    color: black;
}

.reaction-button i {
    margin-right: 5px;
}

.reaction-button:hover {
    color: #333;
}

/* Ensure comment section is hidden initially */
.comment-section {
    display: none; /* Hidden by default */
    margin-top: 10px;
    border-top: 1px solid #dbdbdb;
    padding-top: 10px;
    max-height: 200px;
    overflow-y: auto;
}


.comment-section h4 {
    font-size: 16px;
    margin-bottom: 10px;
}

.comment-input {
    width: calc(100% - 100px);
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    margin-right: 10px;
    font-size: 14px;
}

.comment-post-button {
    padding: 10px 15px;
    border: none;
    border-radius: 5px;
    background-color: #007bff;
    color: white;
    font-size: 14px;
    cursor: pointer;
}

.comment-post-button:hover {
    background-color: #0056b3;
}

/* Modal */
.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    align-items: center;
    justify-content: center;
    z-index: 1000;
}

.modal-content {
    background-color: white;
    padding: 20px;
    border-radius: 10px;
    text-align: center;
    width: 90%;
    max-width: 400px;
}

.modal-content h3 {
    margin-bottom: 20px;
}

.modal-content button {
    padding: 10px 15px;
    margin: 10px;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
}

#confirm-delete {
    background-color: red;
    color: white;
}

#confirm-delete:hover {
    background-color: darkred;
}

#cancel-delete {
    background-color: #ddd;
    color: #333;
}

#cancel-delete:hover {
    background-color: #bbb;
}

.fa-comment,.fa-thumbs-up,.fa-thumbs-down{
    cursor: pointer;
}

/* Modal Background */
#reaction-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
    z-index: 1000; /* Make sure it's above other content */
    display: flex;
    align-items: center;
    justify-content: center;
}

/* Modal Content */
#reaction-modal .modal-content {
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
    padding: 20px;
    width: 90%;
    max-width: 500px;
    animation: fadeIn 0.3s ease-in-out; /* Smooth fade-in animation */
}

/* Close Button */
#reaction-modal .close {
    position: absolute;
    top: 10px;
    right: 15px;
    font-size: 20px;
    font-weight: bold;
    color: #333;
    cursor: pointer;
    transition: color 0.3s ease;
}

#reaction-modal .close:hover {
    color: red; /* Highlight on hover */
}

/* Tabs Section */
#reaction-modal .tabs {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
    border-bottom: 2px solid #ddd;
}

#reaction-modal .tabs button {
    flex: 1; /* Equal width for both tabs */
    background-color: transparent;
    border: none;
    font-size: 16px;
    font-weight: bold;
    padding: 10px;
    cursor: pointer;
    transition: background-color 0.3s ease, color 0.3s ease;
}

#reaction-modal .tabs button.active {
    background-color: #007bff;
    color: #ffffff;
    border-radius: 10px 10px 0 0; /* Rounded corners for active tab */
}

#reaction-modal .tabs button:hover {
    background-color: #0056b3;
    color: #ffffff;
}

/* Tab Content */
#reaction-modal .tab-content {
    display: none; /* Hide content by default */
}

#reaction-modal .tab-content.active {
    display: block; /* Show active tab content */
}

/* List Styling */
#reaction-modal ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
}

#reaction-modal ul li {
    display: flex;
    align-items: center;
    padding: 10px;
    margin-bottom: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background-color: #f9f9f9;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
}



/* User Profile Image */
#reaction-modal ul li img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    margin-right: 10px;
}

/* Username Styling */
#reaction-modal ul li span {
    font-weight: bold;
    color: #333;
}

/* Fade-In Animation */
@keyframes fadeIn {
    from {
        opacity: 0;
        transform: scale(0.9);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}
        /* Remove bullets from the notification list */
        #notificationsList {
            list-style-type: none;
            padding: 0;
        }

#notificationsList li {
    list-style: none;
    margin-bottom: 10px;
    padding: 10px;
    background-color: #f9f9f9;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column; /* Stack items vertically */
    align-items: flex-start; /* Align text and buttons to the start */
}

#notificationsList .button-group {
    display: flex;
    gap: 10px; /* Add space between buttons */
    margin-top: 10px; /* Add spacing between text and buttons */
}

#notificationsList a {
    text-decoration: none;
    color: blue;
    font-weight: bold;
}

#notificationsList button {
    padding: 5px 10px;
    font-size: 14px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

#notificationsList .accept-button {
    background-color: #007bff;
    color: white;
}

#notificationsList .accept-button:hover {
    background-color: #0056b3;
}

#notificationsList .decline-button {
    background-color: #f44336;
    color: white;
}

#notificationsList .decline-button:hover {
    background-color: #d32f2f;
}

#notificationsList .delete-button {
    background-color: gray;
    color: white;
}

#notificationsList .delete-button:hover {
    background-color: #333;
}

/* Add Friend Button (Circular) */
.add-friend-btn {
    background-color: #007bff; /* Blue background */
    color: #fff; /* White icon color */
    border: none;
    border-radius: 50%; /* Makes it circular */
    width: 40px; /* Fixed width for circle */
    height: 40px; /* Fixed height for circle */
    display: flex; /* Flexbox for centering content */
    align-items: center; /* Vertically center icon */
    justify-content: center; /* Horizontally center icon */
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease; /* Smooth hover transition */
    font-size: 18px; /* FontAwesome icon size */
}

.add-friend-btn:hover {
    background-color: #0056b3; /* Darker blue on hover */
    transform: scale(1.05); /* Slightly enlarge on hover */
}

/* Remove Friend Button (Circular) */
.remove-friend-btn {
    background-color: #f44336; /* Red background */
    color: #fff; /* White icon color */
    border: none;
    border-radius: 50%; /* Makes it circular */
    width: 40px; /* Fixed width for circle */
    height: 40px; /* Fixed height for circle */
    display: flex; /* Flexbox for centering content */
    align-items: center; /* Vertically center icon */
    justify-content: center; /* Horizontally center icon */
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease; /* Smooth hover transition */
    font-size: 18px; /* FontAwesome icon size */
}

.remove-friend-btn:hover {
    background-color: #d32f2f; /* Darker red on hover */
    transform: scale(1.05); /* Slightly enlarge on hover */
}

    </style>
</head>

<body>
    <div class="container">
        <a href="/home/profile" class="profile-link">
            <div class="profile-picture">
                <img src="<%= user.profileImage || '/path/to/default-profile.png' %>" alt="Profile Picture">
            </div>
            <div class="profile-name">
                <%= user.firstName %>
                    <%= user.lastName %>
            </div>
        </a>

        <a href="#" class="create-post-link" onclick="openModal()">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="icon" style="width: 20px; height: 20px; vertical-align: middle;">
              <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
            </svg>Create Post</a>
          
        <div class="sidebar">

            <aside>

                <ul>

                    <li><a href="/home" id="home-link"><i class="fa fa-home"></i>Home</a></li>

                    <li id="friends">
                        <a href="/friend" id="fr"><i class='fas fa-user-friends'></i>Friends</a>
                    </li>


                    <li id="chats">
                        <a href="/chats" id="ch"><i class="fa fa-comments"></i>Chats</a>
                      </li>
                    <li href="/home/notifications" class="notifications-link">
                        <a onclick="openNotificationModal()" id="notify"><i class="fa fa-bell"></i>Notifications</a>
                    </li>
                    <li href="/friend/list" class="search" id="searchTab">
                        <a onclick="openSearchModal()" id="search"><i class="fa fa-search"></i>Search</a>
                    </li>

                </ul>
            </aside>
        </div>

        <div class="feed">
            <section class="story-carousel">
                <!-- User's own story upload option -->
                <div class="story" onclick="openUploadModal()">
                    <div class="story-image-wrapper">
                        <img src="<%= user.profileImage %>" alt="Your Story">
                    </div>
                    <p>Your Story</p>
                </div>
            
                <!-- Stories grouped by user -->
                <% const groupedStories = {}; %>
                <% stories.forEach(story => { 
                    groupedStories[story.user._id] = groupedStories[story.user._id] || [];
                    groupedStories[story.user._id].push(story);
                }); %>
            
                <% Object.keys(groupedStories).forEach(userId => { 
                    const userStories = groupedStories[userId];
                    const firstStory = userStories[0];
                %>
                    <div class="story" onclick="viewStoryGroup('<%= userId %>')">
                        <div class="story-image-wrapper">
                            <img src="<%= firstStory.user.profileImage || '/path/to/default-profile.png' %>" alt="<%= firstStory.user.firstName %>">
                        </div>
                        <p><%= firstStory.user.firstName %></p>
                    </div>
                <% }); %>
            </section>
            <div id="storyModal" class="modal">
                <div class="modal-content">
                    <span class="close" onclick="closeStoryModal()">&times;</span>
                    <button id="prevStory" class="nav-arrow left-arrow" onclick="navigateStory(-1)">&#10094;</button>
                    <div class="story-details">
                        <h3 id="storyUserName"></h3> <!-- Display the user's name -->
                    </div>
                    <img id="storyImage" src="" alt="Story Image">
                    <div class="story-reactions">
                        <button id="likeButton" class="reaction-button" onclick="likeStory()">❤️ <span id="likesCount">0</span></button>
                        <button id="dislikeButton" class="reaction-button" onclick="dislikeStory()">👎 <span id="dislikesCount">0</span></button>
                    </div>
                    <button id="nextStory" class="nav-arrow right-arrow" onclick="navigateStory(1)">&#10095;</button>
                    <!-- Close Button -->
                    <span class="close" onclick="closeStoryModal()">&times;</span>
                </div>
            </div>
            
            
            

            <!-- Modal for Creating a Post -->
            <div id="uploadStoryModal" class="modal">
                <div class="modal-content">
                    <span class="close" onclick="closeUploadModal()">&times;</span>
                    <h3>Upload Story</h3>
                    <form action="/stories/upload-story" method="POST" enctype="multipart/form-data">

                        <div class="form-group">
                            <div class="custom-file-upload">
                                <label for="storyFile" class="upload-button">Choose File</label>
                                <span id="file-name">No file chosen</span>
                                <input type="file" name="storyFile" accept="image/,video/" id="storyFile"
                                    onchange="updateFileNamen()">
                            </div>
                        </div>

                        <div class="form-group">
                            <div for="privacy" class="radio-inputs">
                                <label class="privacy">
                                    <input type="radio" name="radio" checked="">
                                    <span class="name">Public</span>
                                </label>
                                <label class="privacy">
                                    <input type="radio" name="radio">
                                    <span class="name">Private</span>
                                </label>
                            </div>
                        </div>
                        <br>
                        <button type="submit" class="post-button">Upload</button>
                    </form>
                </div>
            </div>

            <!-- Modal for Viewing a Story
            <div id="storyModal" class="modal">
                <div class="modal-content">
                    <span class="close" onclick="closeStoryModal()">&times;</span>
                    <img id="storyImage" src="" alt="Story Image"
                        style="width: 100%; height: auto; border-radius: 10px;">
                </div>
            </div> -->


            <section class="posts">
                <h2 class="posts-heading">Posts</h2>
                <% posts.forEach(post => { %>
                    <article class="post">
                        <!-- Post Header -->
                        <div class="post-header">
                            <div class="post-author-image-container">
                                <img src="<%= post.user.profileImage || '/path/to/default-profile.png' %>" 
                                     alt="<%= post.user.firstName %>" class="post-author-image">
                            </div>
                            <div class="post-author-details">
                                <a href="<%= post.user._id.toString() === user._id.toString() ? '/home/profile' : `/home/profile/user/${post.user._id}` %>"
                                   class="post-author-username"><%= post.user.username %></a>
                                <p class="post-date"><%= new Date(post.createdAt).toLocaleDateString('en-US', {
                                    year: 'numeric', month: 'short', day: 'numeric'
                                }) %></p>
                            </div>
                            <% if (post.isOwner) { %>
                                <button class="post-delete-button" onclick="confirmDelete('post', '<%= post._id %>')">
                                    <i class="fa fa-trash"></i>
                                </button>
                            <% } %>
                        </div>
            
                        <!-- Post Content -->
                        <div class="post-content">
                            <p class="post-caption"><%= post.content %></p>
                            <% if (post.mediaUrl) { %>
                                <% if (post.mediaType === 'image') { %>
                                    <img src="<%= post.mediaUrl %>" alt="Post image" class="post-media">
                                <% } else if (post.mediaType === 'video') { %>
                                    <video controls class="post-media">
                                        <source src="<%= post.mediaUrl %>" type="video/mp4">
                                        Your browser does not support the video tag.
                                    </video>
                                <% } %>
                            <% } %>
                        </div>
            
                        <!-- Post Actions -->
                        <div class="post-actions">
                                <i class="fa fa-thumbs-up" onclick="toggleLike(event, '<%= post._id %>')"></i> 
                                <span id="likes-count-<%= post._id %>" onclick="openReactionModal('post', '<%= post._id %>', 'likes')">
                                <%= post.likes.length %>
                                </span>
            
                                <i class="fa fa-thumbs-down" onclick="toggledisLike(event, '<%= post._id %>')"></i> 
                                <span id="dislikes-count-<%= post._id %>" onclick="openReactionModal('post', '<%= post._id %>', 'dislikes')">
                                 <%= post.dislikes.length %>
                                </span>
            
                            <!-- <button class="reaction-button" onclick="openCommentSection('<%= post._id %>')"> -->
                                <i class="fa fa-comment" onclick="openCommentSection('<%= post._id %>')"></i> <span class="comment-count"><%= post.comments.length %></span>
                            </button>
                        </div>
            
                        <!-- Comment Section -->
                        <div id="commentSection-<%= post._id %>" class="comment-section">
                            <h4>Comments</h4>
                            <ul id="comments-list-<%= post._id %>"></ul>
                            <input type="text" id="new-comment-<%= post._id %>" placeholder="Add a comment..." class="comment-input">
                            <button class="comment-post-button" onclick="addComment('<%= post._id %>')">Post</button>
                        </div>
                    </article>
            
                    <!-- Delete Modal -->
                    <div id="delete-modal" class="modal">
                        <div class="modal-content">
                            <h3>Are you sure you want to delete this?</h3>
                            <button id="confirm-delete" onclick="performDelete('<%= post._id %>')">Yes, Delete</button>
                            <button id="cancel-delete" onclick="closeDeleteModal()">Cancel</button>
                        </div>
                    </div>
                <% }) %>
            </section>
            
            
        </div>

        <div class="right-sidebar" id="right-sidebar">
            <aside>
                <h2>Suggestions</h2>
                <!-- Suggested friends -->
                <ul id="suggestionsList">
                    <!-- Suggestions will be populated dynamically here -->
                </ul>
            </aside>
        </div>
        <div id="postModal" class="modal">
            <div class="modal-content">
                <span class="close" onclick="closeModal()">&times;</span>
                <h3>Create a Post</h3>
                <form action="/home/create-post" method="POST" enctype="multipart/form-data">

                    <div class="form-group">
                        <div class="custom-file-upload">
                            <label for="mediaFile" class="upload-button">Choose File</label>
                            <span id="file-nam">No file chosen</span>
                            <input type="file" name="mediaFile" accept="image/,video/" id="mediaFile"
                                onchange="updateFileName()">
                        </div>
                    </div>
                    <div class="form-group">
                        <textarea name="content" placeholder="Write a Caption" id="caption"></textarea>
                    </div>
                    <div class="form-group">
                        <div for="privacy" class="radio-inputs">
                            <label class="privacy">
                                <input type="radio" name="privacy" value="public" checked="">
                                <span class="name">Public</span>
                            </label>
                            <label class="privacy">
                                <input type="radio" name="privacy" value="private">
                                <span class="name">Private</span>
                            </label>

                            <label class="privacy">
                                <input type="radio" name="privacy" value="friends">
                                <span class="name">Friends</span>
                            </label>
                        </div>
                    </div>
                    <br>
                    <button type="submit" class="post-button">Post</button>
                </form>
            </div>
        </div>
    </div>


    <!-- Notification Modal -->
    <div id="notification-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeNotificationModal()">&times;</span>
            <h3>Notifications</h3>

            <ul id="notificationsList">
                <!-- JavaScript will populate notifications here -->

            </ul>

        </div>
    </div>

    <div id="search-modal" class="modal">
        <div class="modal-content">
            <h3>Search Friends:</h3>
            <div class="group">
                <svg class="icon" aria-hidden="true" viewBox="0 0 24 24">
                    <g>
                        <path
                            d="M21.53 20.47l-3.66-3.66C19.195 15.24 20 13.214 20 11c0-4.97-4.03-9-9-9s-9 4.03-9 9 4.03 9 9 9c2.215 0 4.24-.804 5.808-2.13l3.66 3.66c.147.146.34.22.53.22s.385-.073.53-.22c.295-.293.295-.767.002-1.06zM3.5 11c0-4.135 3.365-7.5 7.5-7.5s7.5 3.365 7.5 7.5-3.365 7.5-7.5 7.5-7.5-3.365-7.5-7.5z">
                        </path>
                    </g>
                </svg>
                <input placeholder="Search" type="search" class="input" id="tab" oninput="searchUsers()">
            </div>
            <span class="close" onclick="closeSearchModal()">&times;</span>

            <ul id="searchResults">
                <!-- JavaScript will populate notifications here -->

            </ul>

        </div>
    </div>

    <div id="reaction-modal" class="modal" style="display: none;">
        <div class="modal-content">
            <span class="close" onclick="closeReactionModal()">&times;</span>
            <div class="tabs">
                <button id="likes-tab" onclick="showLikes()">Likes</button>
                <button id="dislikes-tab" onclick="showDislikes()">Dislikes</button>
            </div>
            <div id="likes-section" class="tab-content">
                <h3>Liked by</h3>
                <ul id="likes-list">
                    <!-- Likes will be dynamically inserted here -->
                </ul>
            </div>
            <div id="dislikes-section" class="tab-content" style="display: none;">
                <h3>Disliked by</h3>
                <ul id="dislikes-list">
                    <!-- Dislikes will be dynamically inserted here -->
                </ul>
            </div>
        </div>
    </div>





    <!-- JavaScript to handle modal behavior -->
    <script>

window.addEventListener('resize', () => {
    const container = document.querySelector('.container');
    const feed = document.querySelector('.feed');
    const sidebar = document.querySelector('.sidebar');
    const rightSidebar = document.querySelector('.right-sidebar');

    if (window.innerWidth <= 768) {
        sidebar.style.display = 'none'; // Hide left sidebar
        rightSidebar.style.display = 'none'; // Hide right sidebar
        feed.style.marginLeft = '0'; // Adjust feed margin
        feed.style.marginRight = '0';
    } else {
        sidebar.style.display = ''; // Reset to default
        rightSidebar.style.display = '';
        feed.style.marginLeft = '15%'; // Restore feed margin
        feed.style.marginRight = '15%';
    }
});

function toggleCommentSection(postId) {
    const commentSection = document.getElementById(`commentSection-${postId}`);
    
    // Toggle the display property
    if (commentSection.style.display === 'none' || commentSection.style.display === '') {
        commentSection.style.display = 'block'; // Show the comment section
    } else {
        commentSection.style.display = 'none'; // Hide the comment section
    }
}

        function scrollToTopAndRefresh() {
            window.scrollTo({ top: 0, behavior: 'smooth' });
            setTimeout(() => {
                location.reload();
            }, 500); // Delay to ensure smooth scroll completes before refreshing
        }

        function updateFileName() {
            const fileInput = document.getElementById("mediaFile");
            const fileName = document.getElementById("file-nam");
            fileName.textContent = fileInput.files.length > 0 ? fileInput.files[0].name : "No file chosen";
        }

        function updateFileNamen() {
            const fileInput = document.getElementById("storyFile");
            const fileName = document.getElementById("file-name");
            fileName.textContent = fileInput.files.length > 0 ? fileInput.files[0].name : "No file chosen";
        }


        function openModal() {
            document.getElementById("postModal").style.display = "flex";
        }

        function closeModal() {
            document.getElementById("postModal").style.display = "none";
        }

        function openUploadModal() {
            document.getElementById("uploadStoryModal").style.display = "flex";
        }

        function closeUploadModal() {
            document.getElementById("uploadStoryModal").style.display = "none";
        }

        function viewStory(url) {
            document.getElementById("storyImage").src = url;
            document.getElementById("storyModal").style.display = "flex";
        }

        function closeStoryModal() {
            document.getElementById("storyModal").style.display = "none";
        }

        window.onclick = function (event) {
            const postModal = document.getElementById("postModal");
            const storyModal = document.getElementById("storyModal");
            const uploadStoryModal = document.getElementById("uploadStoryModal");
            const notification = document.getElementById("notification-modal");
            const search = document.getElementById("search-modal");
            const friends = document.getElementById("friends-modal")

            if (event.target === postModal) {
                closeModal();
            } else if (event.target === storyModal) {
                closeStoryModal();
            } else if (event.target === uploadStoryModal) {
                closeUploadModal();
            }
            else if (event.target === notification) {
                closeNotificationModal();
            }
            else if (event.target === search) {
                closeSearchModal();
            }

        }


        function openSearchModal() {
            document.getElementById("search-modal").style.display = "flex";
            setActiveBackground('search'); // Highlight "Search Friends"
        }
        function closeSearchModal() {
            document.getElementById("search-modal").style.display = "none";
            resetStyles(); // Reset styles for all elements
        }

        function openNotificationModal() {
            document.getElementById("notification-modal").style.display = "flex";
            setActiveBackground('notify'); // Highlight "Notifications"
        }

        function closeNotificationModal() {
            document.getElementById("notification-modal").style.display = "none";
            resetStyles(); // Reset styles for all elements
        }




        function setActiveBackground(targetId) {
            const sidebarItems = document.querySelectorAll('.sidebar ul li');

            // Remove the active class from all items
            // sidebarItems.forEach(item => item.classList.remove('active'));

            // Add the active class to the selected item's parent <li>
            const targetLi = document.getElementById(targetId)?.parentElement;
            if (targetLi) {
                targetLi.classList.add('active');
            }
        }

        function resetStyles() {
            // Simply remove the 'active' class from all items
            const sidebarItems = document.querySelectorAll('.sidebar ul li');
            sidebarItems.forEach(item => item.classList.remove('active'));
        }




        async function searchUsers() {
    const query = document.getElementById('tab').value.trim();
    const resultsList = document.getElementById('searchResults');

    // Clear results if query is empty
    if (!query) {
        resultsList.innerHTML = '<li>No results found</li>';
        return;
    }

    try {
        const response = await fetch(`/home/search-users?query=${query}`);
        const users = await response.json();

        console.log("Users received:", users); // Log received users

        resultsList.innerHTML = ''; // Clear previous results

        // Check if no users were found
        if (!users || users.length === 0) {
            resultsList.innerHTML = '<li>No results found</li>';
            return;
        }

        // Populate search results
        users.forEach(user => {
            const li = document.createElement('li');
            li.className = 'search-item'; // Add class for styling

            // User card layout
            li.innerHTML = `
                <div class="search-card">
                    <img src="${user.profileImage || '/path/to/default-profile.png'}" alt="Profile Image" class="search-image">
                    <div class="search-info">
                        <a href="/home/profile/user/${user._id}" class="search-username">${user.username || user.firstName}</a>
                    </div>
                    <button class="${user.isFriend ? 'remove-friend-btn' : 'add-friend-btn'}" onclick="${user.isFriend ? `removeFriend('${user._id}')` : `addFriend('${user._id}')`}">
                        <i class="${user.isFriend ? 'fas fa-user-minus' : 'fas fa-user-plus'}"></i>
                    </button>
                </div>
            `;

            resultsList.appendChild(li);
        });
    } catch (error) {
        console.error("Error searching users:", error);
        resultsList.innerHTML = '<li>Error loading results</li>';
    }
}




        async function addFriend(userId) {
            try {
                const response = await fetch('/friend/send-request', { // Updated endpoint
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ targetUserId: userId })
                });

                if (response.ok) {
                    const result = await response.json();
                    alert(result.message); // Show message from server (e.g., "Friend request sent")
                    searchUsers(); // Refresh search results to update the + or - button
                    loadNotifications(); // Refresh notifications to reflect the new friend request sent
                } else {
                    const errorData = await response.json();
                    alert(errorData.message || 'Failed to send friend request.');
                }
            } catch (error) {
                console.error("Error sending friend request:", error);
                alert("An error occurred while sending the friend request.");
            }
        }

        async function removeFriend(friendId) {
            try {
                const response = await fetch('/friend/remove', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ friendId }),
                });

                if (response.ok) {
                    alert('Friend removed successfully');
                    await loadFriends(); // Refresh friends list
                } else {
                    const errorData = await response.json();
                    console.error("Failed to remove friend:", errorData.message);
                }
            } catch (error) {
                console.error("Error removing friend:", error);
            }
        }
        document.addEventListener('DOMContentLoaded', () => {
            loadFriends();
        });
        async function loadFriends() {
            try {
                const response = await fetch('/friend/list');
                const friends = await response.json();

                const friendsList = document.getElementById('friendsList');
                friendsList.innerHTML = ''; // Clear previous list

                friends.forEach(friend => {
                    const li = document.createElement('li');
                    li.textContent = friend.username || `${friend.firstName} ${friend.lastName}`;

                    // Button for removing friend
                    const removeButton = document.createElement('button');
                    removeButton.textContent = '-';
                    removeButton.onclick = () => removeFriend(friend._id);

                    li.appendChild(removeButton);
                    friendsList.appendChild(li);
                });
            } catch (error) {
                console.error("Error loading friends:", error);
            }
        }

        async function loadNotifications() {
    try {
        const response = await fetch('/home/notifications'); // Fetch notifications from backend
        const notifications = await response.json(); // Parse response data

        const notificationsList = document.getElementById('notificationsList');
        if (!notificationsList) {
            console.error("Element with id 'notificationsList' not found.");
            return;
        }

        notificationsList.innerHTML = ''; // Clear previous notifications

        notifications.forEach(notification => {
            const li = document.createElement('li');
            const senderName = notification.from?.username || notification.from?.firstName || "Unknown User";

            // Create a link for the sender's name
            const senderLink = document.createElement('a');
            senderLink.href = `/home/profile/user/${notification.from?._id}`; // Link to user's profile
            senderLink.textContent = senderName;
            senderLink.style.textDecoration = 'none';
            senderLink.style.color = 'blue'; // Optional styling
            li.appendChild(senderLink);

            // Handle different notification types
            switch (notification.type) {
                case 'friend-request':
                    li.appendChild(document.createTextNode(` sent you a friend request.`));

                    // Create button-group div
                    const buttonGroup = document.createElement('div');
                    buttonGroup.className = 'button-group';

                    const acceptButton = document.createElement('button');
                    acceptButton.className = 'accept-button';
                    acceptButton.style.marginRight = '5px';
                    acceptButton.onclick = () => handleAcceptRequest(notification._id);

                    // Add FontAwesome checkmark icon to the Accept button
                    const acceptIcon = document.createElement('i');
                    acceptIcon.className = 'fa fa-check'; // FontAwesome checkmark icon
                    acceptButton.appendChild(acceptIcon);

                    const declineButton = document.createElement('button');
                    declineButton.className = 'decline-button';
                    declineButton.style.marginRight = '5px';
                    declineButton.onclick = () => handleDeclineRequest(notification._id);

                    // Add FontAwesome close icon to the Decline button
                    const declineIcon = document.createElement('i');
                    declineIcon.className = 'fa fa-close'; // FontAwesome close icon
                    declineButton.appendChild(declineIcon);

                    // Add buttons to button-group div
                    buttonGroup.appendChild(acceptButton);
                    buttonGroup.appendChild(declineButton);

                    li.appendChild(buttonGroup); // Add button-group div to li
                    break;

                case 'friend-accepted':
                    li.appendChild(document.createTextNode(` accepted your friend request.`));
                    break;

                case 'friend-declined':
                    li.appendChild(document.createTextNode(` declined your friend request.`));
                    break;

                case 'post-like':
                    li.appendChild(document.createTextNode(` liked your post.`));
                    break;

                case 'post-dislike':
                    li.appendChild(document.createTextNode(` disliked your post.`));
                    break;

                case 'story-like':
                    li.appendChild(document.createTextNode(` liked your story.`));
                    break;

                case 'comment':
                    li.appendChild(document.createTextNode(` commented on your post.`));
                    break;

                case 'comment-reply':
                    li.appendChild(document.createTextNode(` replied to your comment.`));
                    break;

                case 'comment-like':
                    li.appendChild(document.createTextNode(` liked your comment.`));
                    break;

                case 'comment-dislike':
                    li.appendChild(document.createTextNode(` disliked your comment.`));
                    break;

                case 'reply-like':
                    li.appendChild(document.createTextNode(` liked your reply.`));
                    break;

                case 'reply-dislike':
                    li.appendChild(document.createTextNode(` disliked your reply.`));
                    break;

                default:
                    li.appendChild(document.createTextNode(` sent an unknown notification.`));
                    break;
            }

            // Add delete button for all notifications
            const deleteButton = document.createElement('button');
            deleteButton.className = 'delete-button';
            deleteButton.style.marginLeft = '10px';
            deleteButton.onclick = () => deleteNotification(notification._id);

            // Add FontAwesome trash icon to the Delete button
            const deleteIcon = document.createElement('i');
            deleteIcon.className = 'fa fa-trash'; // FontAwesome trash icon
            deleteButton.appendChild(deleteIcon);

            // Add delete button to button-group
            const buttonGroup = li.querySelector('.button-group') || document.createElement('div');
            buttonGroup.appendChild(deleteButton);
            li.appendChild(buttonGroup);

            notificationsList.appendChild(li);
        });
    } catch (error) {
        console.error("Error loading notifications:", error);
    }
}



        async function deleteNotification(notificationId) {
            try {
                const response = await fetch(`/notifications/notifications/${notificationId}`, {
                    method: 'DELETE',
                });

                if (response.ok) {
                    alert("Notification deleted successfully");
                    await loadNotifications(); // Reload notifications after deletion
                } else {
                    const errorData = await response.json();
                    console.error("Failed to delete notification:", errorData.message);
                }
            } catch (error) {
                console.error("Error deleting notification:", error);
            }
        }

        async function handleAcceptRequest(notificationId) {
            try {
                const response = await fetch('/friend/accept-request', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ notificationId }),
                });

                if (response.ok) {
                    alert("Friend request accepted successfully");
                    await loadNotifications();
                    await loadFriends(); // Reload friends list
                }
            } catch (error) {
                console.error("Error accepting friend request:", error);
            }
        }

        async function handleDeclineRequest(notificationId) {
            try {
                const response = await fetch('/friend/decline-request', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ notificationId }),
                });

                if (response.ok) {
                    alert("Friend request declined successfully");
                    await loadNotifications();
                }
            } catch (error) {
                console.error("Error declining friend request:", error);
            }
        }

        // Call the loadNotifications function on page load
        loadNotifications();


        loadFriends();

        async function toggleLike(event, postId) {
            event.stopPropagation();
            try {
                const response = await fetch(`/posts/${postId}/like`, { method: 'POST' });
                const data = await response.json();

                // Update the like count
                document.getElementById(`likes-count-${postId}`).textContent = `${data.likesCount} `;

                // If the likes modal is open, update it
                // if (document.getElementById('likes-modal').style.display === 'block') {
                //     populateLikesModal(data.likedBy);
                // }
            } catch (error) {
                console.error("Error toggling like:", error);
            }
        }
        async function toggledisLike(event, postId) {
            event.stopPropagation();
            try {
                const response = await fetch(`/posts/${postId}/dislike`, { method: 'POST' });
                const data = await response.json();

                // Update the like count
                document.getElementById(`dislikes-count-${postId}`).textContent = `${data.dislikesCount} `;
            } catch (error) {
                console.error("Error toggling like:", error);
            }
        }

        function openCommentSection(postId) {
            const commentSection = document.getElementById(`commentSection-${postId}`);

            if (commentSection.style.display === 'none' || commentSection.style.display === '') {
                // Load comments only if the section is being opened
                loadComments(postId);
                commentSection.style.display = 'block';
            } else {
                // Toggle visibility to close the comment section
                commentSection.style.display = 'none';
            }
        }

        async function loadComments(postId) {
            try {
                const response = await fetch(`/posts/${postId}`);
                const data = await response.json();

                const commentsList = document.getElementById(`comments-list-${postId}`);
                commentsList.innerHTML = data.comments.map((comment) => `
      <li>
        <img src="${comment.user.profileImage || '/images/default-profile.png'}" 
             alt="${comment.user.username}'s profile image" 
             style="width: 30px; height: 30px; border-radius: 50%; margin-right: 5px;">
        <strong>${comment.user.username}:</strong> ${comment.content}
        <span>
          <button onclick="toggleCommentLike('${comment._id}')">❤️</button>
          <span id="comment-likes-${comment._id}" onclick="openReactionModal('comment','${comment._id}', 'likes')">${comment.likesCount} Likes</span>
          <button onclick="toggleCommentdisLike('${comment._id}')">❤️</button>
          <span id="comment-dislikes-${comment._id}" onclick="openReactionModal('comment','${comment._id}', 'dislikes')">${comment.dislikesCount} Dislikes</span>
        </span>
        ${comment.isOwner ? `<button onclick="confirmDelete('comment', '${comment._id}')">Delete Comment</button>` : ''}
        <button onclick="toggleReplyBox('${comment._id}')">Reply</button>

        <div id="reply-box-${comment._id}" class="reply-box" style="display: none; margin-top: 10px;">
          <input type="text" id="new-reply-${comment._id}" placeholder="Write a reply...">
          <button onclick="addReply('${comment._id}')">Post Reply</button>
        </div>

        <ul id="replies-list-${comment._id}" class="replies-list" style="margin-top: 10px; padding-left: 20px;">
          ${comment.replies.map((reply) => `
            <li>
              <img src="${reply.user.profileImage || '/images/default-profile.png'}" 
                   alt="${reply.user.username}'s profile image" 
                   style="width: 25px; height: 25px; border-radius: 50%; margin-right: 5px;">
              <strong>${reply.user.username}:</strong> ${reply.content}
              <span>
                <button onclick="toggleReplyLike('${comment._id}', '${reply._id}')">❤️</button>
                <span id="reply-likes-${reply._id}" onclick="openReactionModal('reply','${reply._id}', 'likes')">${reply.likesCount} Likes</span>
                <button onclick="toggleReplydisLike('${comment._id}', '${reply._id}')">❤️</button>
                <span id="reply-dislikes-${reply._id}" onclick="openReactionModal('reply','${reply._id}', 'dislikes')">${reply.dislikesCount} Dislikes</span>
                ${reply.isOwner ? `<button onclick="confirmDelete('reply', '${reply._id}')">Delete Reply</button>` : ''}
              </span>
            </li>
          `).join('')}
        </ul>
      </li>
    `).join('');
            } catch (error) {
                console.error('Error loading comments:', error);
            }
        }



        async function addComment(postId) {
            const commentText = document.getElementById(`new-comment-${postId}`).value.trim();
            if (!commentText) return;

            try {
                const response = await fetch(`/posts/${postId}/comment`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ content: commentText }),
                });

                if (response.ok) {
                    const data = await response.json(); // Get the newly created reply data
                    loadComments(postId); // Reload comments after posting a new one
                    document.querySelector(".commentcount").innerHTML = `${data.CommentCount} Comment`
                    document.getElementById(`new-comment-${postId}`).value = ''; // Clear input
                }
            } catch (error) {
                console.error("Error adding comment:", error);
            }
        }


        function toggleReplyBox(commentId) {
            const replyBox = document.getElementById(`reply-box-${commentId}`);
            replyBox.style.display = replyBox.style.display === 'none' || replyBox.style.display === '' ? 'block' : 'none';
        }

        async function addReply(commentId) {
            const replyInput = document.getElementById(`new-reply-${commentId}`);
            const replyText = replyInput.value.trim();

            if (!replyText) return;

            try {
                const response = await fetch(`/comments/${commentId}/reply`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ content: replyText }),
                });

                if (response.ok) {
                    const newReply = await response.json(); // Get the newly created reply data
                    replyInput.value = ''; // Clear the input field

                    // Dynamically add the new reply to the DOM
                    const repliesList = document.getElementById(`replies-list-${commentId}`);
                    if (repliesList) {
                        const replyHTML = `
          <li id="reply-${newReply._id}">
            <img src="${newReply.user.profileImage || '/images/default-profile.png'}" 
                 alt="${newReply.user.username}'s profile image" 
                 style="width: 25px; height: 25px; border-radius: 50%; margin-right: 5px;">
            <strong>${newReply.user.username}:</strong> ${newReply.content}
            <span>
              <button onclick="toggleReplyLike('${commentId}', '${newReply._id}')">❤️</button>
              <span id="reply-likes-${newReply._id}" onclick="openReactionModal('reply','${newReply._id}', 'likes')">0 Likes</span>
              <button onclick="toggleReplydisLike('${commentId}', '${newReply._id}')">❤️</button>
              <span id="reply-dislikes-${newReply._id}" onclick="openReactionModal('reply','${newReply._id}', 'dislikes')">0 Dislikes</span>
                ${newReply.isOwner ? `<button onclick="confirmDelete('reply', '${newReply._id}')">Delete Reply</button>` : ''}
            </span>
          </li>
        `;
                        repliesList.insertAdjacentHTML('beforeend', replyHTML); // Add the new reply to the list

                    }
                } else {
                    console.error('Error adding reply:', await response.text());
                }
            } catch (error) {
                console.error('Error adding reply:', error);
            }
        }



        async function toggleCommentLike(commentId) {
            try {
                const response = await fetch(`/comments/${commentId}/like`, { method: 'POST' });
                const data = await response.json();

                // Update the like count dynamically
                const likeCountElement = document.getElementById(`comment-likes-${commentId}`);
                if (likeCountElement) {
                    likeCountElement.textContent = `${data.likesCount} Likes`;
                }
            } catch (error) {
                console.error("Error toggling comment like:", error);
            }
        }
        async function toggleCommentdisLike(commentId) {
            try {
                const response = await fetch(`/comments/${commentId}/dislike`, { method: 'POST' });
                const data = await response.json();

                // Update the like count dynamically
                const dislikeCountElement = document.getElementById(`comment-dislikes-${commentId}`);
                if (dislikeCountElement) {
                    dislikeCountElement.textContent = `${data.dislikesCount} DisLikes`;
                }
            } catch (error) {
                console.error("Error toggling comment dislike:", error);
            }
        }

        async function toggleReplyLike(commentId, replyIndex) {
            try {
                console.log("mohammad", replyIndex);

                const response = await fetch(`/comments/${commentId}/replies/${replyIndex}/like`, { method: 'POST' });
                const data = await response.json();

                // Update the like count dynamically
                const likeCountElement = document.getElementById(`reply-likes-${replyIndex}`);
                if (likeCountElement) {
                    likeCountElement.textContent = `${data.likesCount} Likes`;
                }
            } catch (error) {
                console.error("Error toggling reply like:", error);
            }
        }
        async function toggleReplydisLike(commentId, replyIndex) {
            try {
                console.log("mohammad", replyIndex);

                const response = await fetch(`/comments/${commentId}/replies/${replyIndex}/dislike`, { method: 'POST' });
                const data = await response.json();

                // Update the like count dynamically
                const dislikeCountElement = document.getElementById(`reply-dislikes-${replyIndex}`);
                if (dislikeCountElement) {
                    dislikeCountElement.textContent = `${data.dislikesCount} Likes`;
                }
            } catch (error) {
                console.error("Error toggling reply Dislike:", error);
            }
        }

        async function loadFriendSuggestions() {
            try {
                const response = await fetch('/friend/suggestions');
                const suggestions = await response.json();

                const suggestionsList = document.getElementById('suggestionsList');
                suggestionsList.innerHTML = ''; // Clear previous suggestions

                if (!suggestions || suggestions.length === 0) {
                    suggestionsList.innerHTML = '<li>No suggestions available</li>';
                    return;
                }

                suggestions.forEach(suggestion => {
                    const li = document.createElement('li');
                    li.className = 'suggestion-item'; // Add a class for styling
        
                    li.innerHTML = `
                    <img src="${suggestion.friend.profileImage || '/path/to/default-profile.png'}" alt="Profile Image" class="suggestion-image" style="width: 30px; height: 30px; border-radius: 50%; margin-right: 10px;">
                    <span class="suggestion-username">${suggestion.friend.username}</span>
                    <button class="add-friend-btn" onclick="addFriend('${suggestion.friend._id}')">Add Friend</button>
                `;
        
                    suggestionsList.appendChild(li);
                });
            } catch (error) {
                console.error("Error loading friend suggestions:", error);
            }
        }
        loadFriendSuggestions();

        function showLikes() {
    console.log('Showing likes');
    document.getElementById('likes-section').style.display = 'block';
    document.getElementById('dislikes-section').style.display = 'none';
    document.getElementById('likes-tab').classList.add('active');
    document.getElementById('dislikes-tab').classList.remove('active');
}


        function showDislikes() {
            document.getElementById('likes-section').style.display = 'none';
            document.getElementById('dislikes-section').style.display = 'block';
            document.getElementById('dislikes-tab').classList.add('active');
            document.getElementById('likes-tab').classList.remove('active');
        }

        async function openReactionModal(type, id, section) {
    const modal = document.getElementById('reaction-modal');
    modal.style.display = 'flex';

    try {
        const response = await fetch(`/posts/${type}/${id}/reactions`);
        const data = await response.json();

        console.log('Reactions Data:', data); // Log the response

        if (response.ok) {
            populateLikesList(data.likedBy);
            populateDislikesList(data.dislikedBy);

            if (section === 'likes') {
                showLikes();
            } else if (section === 'dislikes') {
                showDislikes();
            }
        } else {
            console.error('Error fetching reactions:', data.message || 'Unknown error');
            document.getElementById('likes-list').innerHTML = '<li>Error loading likes</li>';
            document.getElementById('dislikes-list').innerHTML = '<li>Error loading dislikes</li>';
        }
    } catch (error) {
        console.error('Error fetching reactions:', error);
    }
}




        function closeReactionModal() {
            document.getElementById('reaction-modal').style.display = 'none';
        }

        function populateLikesList(likedBy) {
            const likesList = document.getElementById('likes-list');
            likesList.innerHTML = ''; // Clear previous list

            likedBy.forEach(user => {
                const listItem = document.createElement('li');
                listItem.style.display = 'flex';
                listItem.style.alignItems = 'center';
                listItem.style.marginBottom = '10px';

                const img = document.createElement('img');
                img.src = user.profileImage;
                img.alt = `${user.username}'s profile image`;
                img.style.width = '40px';
                img.style.height = '40px';
                img.style.borderRadius = '50%';
                img.style.marginRight = '10px';

                const username = document.createElement('span');
                username.textContent = user.username;
                listItem.appendChild(img);
                listItem.appendChild(username);
                likesList.appendChild(listItem);
            });
        }

        function populateDislikesList(dislikedBy) {
            const dislikesList = document.getElementById('dislikes-list');
            dislikesList.innerHTML = ''; // Clear previous list

            dislikedBy.forEach(user => {
                const listItem = document.createElement('li');
                listItem.style.display = 'flex';
                listItem.style.alignItems = 'center';
                listItem.style.marginBottom = '10px';

                const img = document.createElement('img');
                img.src = user.profileImage;
                img.alt = `${user.username}'s profile image`;
                img.style.width = '40px';
                img.style.height = '40px';
                img.style.borderRadius = '50%';
                img.style.marginRight = '10px';

                const username = document.createElement('span');
                username.textContent = user.username;

                listItem.appendChild(img);
                listItem.appendChild(username);
                dislikesList.appendChild(listItem);
            });
        }

        let deleteType = '';
        let deleteId = '';

        function confirmDelete(type, id) {
            deleteType = type;
            deleteId = id;
            document.getElementById('delete-modal').style.display = 'block';
        }

        function closeDeleteModal() {
            document.getElementById('delete-modal').style.display = 'none';
        }


    async function performDelete(postid) {
          try {
              const response = await fetch(`/posts/delete/${deleteType}/${deleteId}`, { method: 'DELETE' });
              const data = await response.json();
              if (response.ok) {
                  alert("Deleted successfully");
                  if(deleteType=='comment' || deleteType=='reply'){
                    loadComments(postid);
                    if(deleteType=='comment')
                        document.querySelector(".commentcount").innerHTML = `${data.updatedCommentCount} Comments`  
                  }
                  else
                      location.reload();
              } else {
                  console.error("Error deleting:", await response.json());
              }
          } catch (error) {
              console.error("Error performing delete:", error);
          }
          closeDeleteModal();
      }


      let currentStoryGroup = [];
let currentStoryIndex = 0;
let autoNavigateTimeout;

async function viewStoryGroup(userId) {
    try {
        const response = await fetch(`/stories/${userId}`);
        currentStoryGroup = await response.json();
        currentStoryIndex = 0;
        displayStory();
    } catch (error) {
        console.error("Error fetching stories:", error);
    }
}

function displayStory() {
    if (currentStoryGroup.length === 0) {
        closeStoryModal();
        return;
    }

    const story = currentStoryGroup[currentStoryIndex];
    document.getElementById("storyImage").src = story.mediaUrl;

    // Set user name (use "Me" for the user's own story)
    const viewerName = story.user._id === "<%= user._id %>" ? "Me" : story.user.username;
    document.getElementById("storyUserName").textContent = viewerName;

    // Update like and dislike counts for the current story
    document.getElementById("likesCount").textContent = story.likes.length;
    document.getElementById("dislikesCount").textContent = story.dislikes.length;

    // Enable/disable navigation buttons
    document.getElementById("prevStory").disabled = currentStoryIndex === 0;
    document.getElementById("nextStory").disabled = currentStoryIndex === currentStoryGroup.length - 1;

    // Show modal
    document.getElementById("storyModal").style.display = "flex";

    // Reset progress bar
    const progressBar = document.getElementById("storyProgressBar");
    progressBar.style.width = "0%";
    setTimeout(() => {
        progressBar.style.transition = `width 5s linear`;
        progressBar.style.width = "100%";
    }, 0);

    // Start auto-navigation timer
    clearTimeout(autoNavigateTimeout);
    autoNavigateTimeout = setTimeout(() => {
        if (currentStoryIndex < currentStoryGroup.length - 1) {
            navigateStory(1);
        } else {
            closeStoryModal(); // Close modal if it's the last story
        }
    }, 5000); // 5-second timer for auto-navigation
}

async function likeStory() {
    try {
        const storyId = currentStoryGroup[currentStoryIndex]._id; // Current story ID
        const response = await fetch(`/stories/${storyId}/like`, { method: 'POST' });
        const data = await response.json();

        // Update the like and dislike counts for the current story
        document.getElementById("likesCount").textContent = data.likesCount;
        document.getElementById("dislikesCount").textContent = data.dislikesCount;

        // Update the current story's like/dislike data
        currentStoryGroup[currentStoryIndex].likes = data.likes;
        currentStoryGroup[currentStoryIndex].dislikes = data.dislikes;
    } catch (error) {
        console.error("Error liking story:", error);
    }
}

async function dislikeStory() {
    try {
        const storyId = currentStoryGroup[currentStoryIndex]._id; // Current story ID
        const response = await fetch(`/stories/${storyId}/dislike`, { method: 'POST' });
        const data = await response.json();

        // Update the like and dislike counts for the current story
        document.getElementById("likesCount").textContent = data.likesCount;
        document.getElementById("dislikesCount").textContent = data.dislikesCount;

        // Update the current story's like/dislike data
        currentStoryGroup[currentStoryIndex].likes = data.likes;
        currentStoryGroup[currentStoryIndex].dislikes = data.dislikes;
    } catch (error) {
        console.error("Error disliking story:", error);
    }
}


function navigateStory(direction) {
    currentStoryIndex += direction;
    if (currentStoryIndex < 0) currentStoryIndex = 0;
    if (currentStoryIndex >= currentStoryGroup.length) {
        closeStoryModal();
        return;
    }
    displayStory();
}

function closeStoryModal() {
    document.getElementById("storyModal").style.display = "none";
    currentStoryGroup = [];
    currentStoryIndex = 0;
    clearTimeout(autoNavigateTimeout);
}


    </script>
</body>

</html>